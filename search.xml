<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【转载】蚂蚁金服 Service Mesh 深度实践</title>
      <link href="/Service-Mesh/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D-Service-Mesh-%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/"/>
      <url>/Service-Mesh/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D-Service-Mesh-%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>[ServiceMesh] 敖小剑大佬在 QCon 上关于 Service Mesh 的分享</p><a id="more"></a> <p>作者丨敖小剑</p><blockquote><p>2019 年，蚂蚁金服在 Service Mesh 领域继续高歌猛进，进入大规模落地的深水区。本文整理自蚂蚁金服高级技术专家敖小剑在 QCon 全球软件开发大会（上海站）2019 上的演讲，他介绍了 Service Mesh 在蚂蚁金服的落地情况和即将来临的双十一大考，以及大规模落地时遇到的困难和解决方案，助你了解 Service Mesh 的未来发展方向和前景。 </p></blockquote><h1 id="前-言"><a href="#前-言" class="headerlink" title="前   言"></a>前   言</h1><p>大家好，我是敖小剑，来自蚂蚁金服中间件团队，今天带来的主题是“诗和远方：蚂蚁金服 Service Mesh 深度实践”。<br>在过去两年，我先后在 QCon 做过两次 Service Mesh 的演讲：</p><ul><li>2017 年，当时 Service Mesh 在国内还属于蛮荒时代，我当时做了一个名为“Service Mesh: 下一代微服务”的演讲，开始在国内布道 Service Mesh 技术；</li><li>2018 年，做了名为“长路漫漫踏歌而行：蚂蚁金服 Service Mesh 实践探索”的演讲，介绍蚂蚁金服在 Service Mesh 领域的探索性的实践，当时蚂蚁金服刚开始在 Service Mesh 探索。<br>今天，有幸第三次来到 QCon，给大家带来的依然是蚂蚁金服在 Service Mesh 领域的实践分享。和去年不同的是，今年蚂蚁金服进入了 Service Mesh 落地的深水区，规模巨大，而且即将迎来双十一大促考验。</li></ul><blockquote><p>备注：现场做了一个调研，了解听众对 Servicve Mesh 的了解程度，结果不太理想：在此之前对 Service Mesh 有了解的同学目测只有 10% 多点（肯定不到 20%）。Service Mesh 的技术布道，依然任重道远。</p></blockquote><p>今天给大家带来的内容主要有三块：</p><ul><li>蚂蚁金服落地情况介绍：包括大家最关心的双十一落地情况；</li><li>大规模落地的困难和挑战：分享一下我们过去一年中在大规模落地上遇到的问题；</li><li>是否采用 Service Mesh 的建议：这个问题经常被人问起，所以借这个机会给出一些中肯的建议供大家参考；</li></ul><h2 id="蚂蚁金服落地情况介绍"><a href="#蚂蚁金服落地情况介绍" class="headerlink" title="蚂蚁金服落地情况介绍"></a>蚂蚁金服落地情况介绍</h2><p>发展历程和落地规模</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573108860/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/05d1b1cbafe6153923c87e895f5766b4_zi7svw.jpg" alt="ppt-5-1.jpg"></p><p>Service Mesh 技术在蚂蚁金服的落地，先后经历过如下几个阶段：</p><p><strong>技术预研 阶段</strong>：2017 年底开始调研并探索 Service Mesh 技术，并确定为未来发展方向；</p><p><strong>技术探索 阶段</strong>：2018 年初开始用 Golang 开发 Sidecar SOFAMosn，年中开源基于 Istio 的 SOFAMesh；</p><p><strong>小规模落地 阶段</strong>：2018 年开始内部落地，第一批场景是替代 Java 语言之外的其他语言的客户端 SDK，之后开始内部小范围试点；</p><p><strong>规模落地 阶段</strong>：2019 年上半年，作为蚂蚁金融级云原生架构升级的主要内容之一，逐渐铺开到蚂蚁金服内部的业务应用，并平稳支撑了 618 大促；</p><p><strong>全面大规模落地 阶段</strong>：2019 年下半年，在蚂蚁金服内部的业务中全面铺开，落地规模非常庞大，而且准备迎接双十一大促；</p><p>目前 ServiceMesh 正在蚂蚁金服内部大面积铺开，我这里给出的数据是前段时间（大概 9 月中）在云栖大会上公布的数据：应用数百个，容器数量（pod 数）超过 10 万。当然目前落地的 pod 数量已经远超过 10 万，这已经是目前全球最大的 Service Mesh 集群，但这仅仅是一个开始，这个集群的规模后续会继续扩大，明年蚂蚁金服会有更多的应用迁移到 Service Mesh。</p><h2 id="主要落地场景"><a href="#主要落地场景" class="headerlink" title="主要落地场景"></a>主要落地场景</h2><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573108859/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/5c89467385df755e41556e92ebed4a50_zo6ypd.jpg" alt="ppt-6-1.jpg"></p><p>目前 Service Mesh 在蚂蚁金服内部大量落地，包括支付宝的部分核心链路，落地的主要场景有：</p><p>多语言支持：目前除了支持 Java 之外，还支持 Golang，Python，C++，NodeJS 等语言的相互通信和服务治理；</p><p>应用无感知的升级：关于这一点我们后面会有特别的说明；</p><p>流量控制：经典的 Istio 精准细粒度流量控制；</p><p>RPC 协议支持：和 Istio 不同，我们内部使用的主要是 RPC 协议；</p><p>可观测性；</p><h2 id="Service-Mesh-的实际性能数据"><a href="#Service-Mesh-的实际性能数据" class="headerlink" title="Service Mesh 的实际性能数据"></a>Service Mesh 的实际性能数据</h2><p>之前和一些朋友、客户交流过，目前在 Service Mesh 方面大家最关心的是 Service Mesh 的性能表现，包括对于这次蚂蚁金服 Service Mesh 上双十一，大家最想看到的也是性能指标。<br>为什么大家对性能这么关注？</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573108860/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/773cc2680c5bde9dc1bde04bba5c0f0a_zrmncj.png" alt="ppt-7-1.png"></p><p>因为在 Service Mesh 工作原理的各种介绍中，都会提到 Service Mesh 是将原来的一次远程调用，改为走 Sidecar（而且像 Istio 是客户端和服务器端两次 Sidecar，如上图所示），这样一次远程调用就会变成三次远程调用，对性能的担忧也就自然而然的产生了：一次远程调用变三次远程调用，性能会下降多少？延迟会增加多少？</p><p>下图是我们内部的大促压测数据，对比带 SOFAMosn 和不带 SOFAMosn 的情况（实现相同的功能）。其中 SOFAMosn 是我们蚂蚁金服自行开发的基于 Golang 的 Sidecar/ 数据平面，我们用它替代了 Envoy，在去年的演讲中我有做过详细的介绍。</p><blockquote><p>SOFAMosn：<br><a href="https://github.com/sofastack/sofa-mosn" target="_blank" rel="noopener">https://github.com/sofastack/sofa-mosn</a></p></blockquote><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573119950/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/63d50a0b24c66db7f7c50aacf4ba56f5_tza198.png" alt="ppt-8.png"></p><ul><li>CPU：CPU 使用在峰值情况下增加 8%，均值约增加 2%。在最新的一次压测中，CPU 已经优化到基本持平（低于 1%）；</li><li>内存：带 SOFAMosn 的节点比不带 SOFAMosn 的节点内存占用平均多 15M；</li><li>延迟：延迟增加平均约 0.2ms。部分场景带 SOFAMosn 比不带 SOFAMosn RT 增加约 5%，但是有部分特殊场景带 SOFAMosn 比不带 SOFAMosn RT 反而降低 7.5%；</li></ul><p>这个性能表现，和前面”一次远程调用变三次远程调用”的背景和担忧相比有很大的反差。尤其是上面延迟的这个特殊场景，居然出现带 SOFAMosn（三次远程调用）比不带 SOFAMosn（一次远程调用） 延迟反而降低的情况。<br>是不是感觉不科学？</p><h2 id="Service-Mesh-的基本思路"><a href="#Service-Mesh-的基本思路" class="headerlink" title="Service Mesh 的基本思路"></a>Service Mesh 的基本思路</h2><p>我们来快速回顾一下 Service Mesh 实现的基本思路：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573119949/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/848ecf748dd573d2fe91b7e271d1ba7a_fibk70.png" alt="ppt-9.png"></p><p>在基于 SDK 的方案中，应用既有业务逻辑，也有各种非业务功能。虽然通过 SDK 实现了代码重用，但是在部署时，这些功能还是混合在一个进程内的。</p><p>在 Service Mesh 中，我们将 SDK 客户端的功能从应用中剥离出来，拆解为独立进程，以 Sidecar 的模式部署，让业务进程专注于业务逻辑：</p><p>业务进程：专注业务实现，无需感知 Mesh；</p><p>Sidecar 进程：专注服务间通讯和相关能力，与业务逻辑无关；</p><p>我们称之为”关注点分离”：业务开发团队可以专注于业务逻辑，而底层的中间件团队（或者基础设施团队）可以专注于业务逻辑之外的各种通用功能。</p><p>通过 Sidecar 拆分为两个独立进程之后，业务应用和 Sidecar 就可以实现“独立维护”：我们可以单独更新 / 升级业务应用或者 Sidecar。</p><h2 id="性能数据背后的情景分析"><a href="#性能数据背后的情景分析" class="headerlink" title="性能数据背后的情景分析"></a>性能数据背后的情景分析</h2><p>我们回到前面的蚂蚁金服 Service Mesh 落地后的性能对比数据：从原理上说，Sidecar 拆分之后，原来 SDK 中的各种功能只是拆分到 Sidecar 中。整体上并没有增减，因此理论上说 SDK 和 Sidecar 性能表现是一致的。由于增加了应用和 Sidecar 之间的远程调用，性能不可避免的肯定要受到影响。</p><p>首先我们来解释第一个问题：为什么性能损失那么小，和”一次远程调用变三次远程调用”的直觉不符？</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573119949/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/60600553e98ddc1196adb6882c7e4942_me36uh.png" alt="ppt-10.png"></p><p>所谓的“直觉”，是将关注点都集中到了远程调用开销上，下意识的忽略了其他开销，比如 SDK 的开销、业务逻辑处理的开销，因此：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573119949/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/d0defac5020222d694db0db8ffcd10a3_maqpt3.png" alt="ppt-10-2.png"></p><p>推导出来的结果就是有 3 倍的开销，性能自然会有非常大的影响。</p><p>但是，真实世界中的应用不是这样：</p><ol><li>业务逻辑的占比很高：Sidecar 转发的资源消耗相比之下要低很多，通常是十倍百倍甚至千倍的差异；</li><li>SDK 也是有消耗的：即使不考虑各种复杂的功能特性，仅仅就报文（尤其是 Body）序列化的编解码开销也是不低的。而且，客户端和服务器端原有的编解码过程是需要处理 Body 的，而在 Sidecar 中，通常都只是读取 Header 而透传 Body，因此在编解码上要快很多。另外应用和 Sidecar 的两次远程通讯，都是走的 Localhost 而不是真实的网络，速度也要快非常多；</li></ol><p>因此，在真实世界中，我们假定业务逻辑百倍于 Sidecar 的开销，而 SDK 十倍于 Sidecar 的开销，则：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573119949/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/cd554734662867b192ea576cf5511fcc_nimk98.png" alt="ppt-10-3.png"></p><p>推导出来的结果，性能开销从 111 增加到 113，大约增加 2%。这也就解释了为什么我们实际给出的 Service Mesh 的 CPU 和延迟的性能损失都不大的原因。当然，这里我是刻意选择了 100 和 10 这两个系数来拼凑出 2% 这个估算结果，以迎合我们前面给出“均值约增加 2%”的数据。这不是准确数值，只是用来模拟。</p><h2 id="情理当中的意外惊喜"><a href="#情理当中的意外惊喜" class="headerlink" title="情理当中的意外惊喜"></a>情理当中的意外惊喜</h2><p>前面的分析可以解释性能开销增加不多的情景，但是，还记得我们的数据中有一个不科学的地方吗：“部分特殊场景带 SOFAMosn 比不带 SOFAMosn RT 反而降低 7.5%”。</p><p>理论上，无论业务逻辑和 SDK 的开销比 Sidecar 的开销大多少，也就是不管我们怎么优化 Sidecar 的性能，其结果也只能接近零。无论如何不可能出现多两个 Sidecar，CPU 消耗和延迟反而降低的情况。</p><p>这个“不科学”是怎么出现的？<br>我们继续来回顾这个 Service Mesh 的实现原理图：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573119949/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/4827ce40f2090065f3b2ffd366e2926a_m1lobk.png" alt="ppt-11.png"></p><p>出现性能大幅提升的主要的原因，是我们在 SOFAMosn 上做了大量的优化，特别是路由的缓存。在蚂蚁金服内部，服务路由的计算和处理是一个异常复杂的逻辑，非常耗资源。而在最近的优化中，我们为服务路由增加了缓存，从而使得服务路由的性能得到了大幅提升。因此：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573119949/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/f686d573939ab6f138707e3d57c5662c_xt0ym4.png" alt="ppt-11-2.png"></p><blockquote><p>备注：这里我依然是刻意拼凑出 -7% 这个估算结果，请注意这不是准确数值，只是用来模拟示意。</p></blockquote><p>也许有同学会说，这个结果不“公平”：这是优化了的服务路由实现在 PK 没有优化的服务路由实现。的确，理论上说，在 Sidecar 中做的任何性能优化，在 SDK 里面同样可以实现。但是，在 SDK 上做的优化需要等整个调用链路上的应用全部升级到优化后的 SDK 之后才能完全显现。而在传统 SDK 方案中，SDK 的升级是需要应用配合，这通常是一个漫长的等待过程。很可能代码优化和发版一周搞定，但是让全站所有应用都升级到新版本的 SDK 要花费数月甚至一年。</p><p>此时 Service Mesh 的优点就凸显出来了：Service Mesh 下，业务应用和 Sidecar 可以“独立维护” ，我们可以很方便的在业务应用无感知的情况下升级 Sidecar。因此，任何 Sidecar 的优化结果，都可以非常快速的获取收益，从而推动我们对 Sidecar 进行持续不断的升级。</p><p>前面这个延迟降低 7% 的例子，就是一个非常经典的故事：在中秋节前后，我们开发团队的同学，不辞辛苦加班加点的进行压测和性能调优，在一周之内连续做了多次性能优化，连发了多个性能优化的小版本，以“小步快跑”的方式，最后拿到了这个令大家都非常开心的结果。<br>总结：<strong>持续不断的优化 + 无感知升级 = 快速获得收益</strong></p><p>这是一个意外惊喜，但又在情理之中：这是 SDK 下沉到基础设施并具备独立升级能力后带来的红利。</p><p>也希望这个例子，能够让大家更深刻的理解 Service Mesh 的基本原理和优势。</p><h1 id="大规模落地的困难和挑战"><a href="#大规模落地的困难和挑战" class="headerlink" title="大规模落地的困难和挑战"></a>大规模落地的困难和挑战</h1><p>当 Service Mesh 遇到蚂蚁金服的规模，困难和挑战也随之而来：当规模达到一定程度时，很多原本很小的问题都会急剧放大。后面我将在性能、容量、稳定性、可维护性和应用迁移几个方面给大家介绍我们遇到的挑战和实践。</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573119949/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/f686d573939ab6f138707e3d57c5662c_xt0ym4.png" alt="ppt-13.png"></p><h2 id="数据平面的优化"><a href="#数据平面的优化" class="headerlink" title="数据平面的优化"></a>数据平面的优化</h2><p>在数据平面上，蚂蚁金服采用了自行研发的基于 Golang 的方案：SOFAMosn。关于为什么选择全新开发 SOFAMosn，而不是直接使用 Envoy 的原因，在去年 QCon 的演讲中我有过详细的介绍，有兴趣可以了解。<br>前面我们给出的性能数据，实际上主要是数据平面的性能，也就是作为 Sidecar 部署的 SOFAMosn 的性能表现。从数据上看 SOFAMosn 目前的性能表现还是很不错的，这背后是我们在 SOFAMosn 上做了非常多的性能优化。</p><p>CPU 优化：在 SOFAMosn 中我们进行了 Golang 的 writev 优化，将多个包拼装一次写以降低 syscall 调用。测试中发现，Golang 1.9 的时候 writev 有内存泄露的 bug。当时 debug 的过程非常的辛苦…… 详情见我们当时给 Golang 提交的 PR：</p><blockquote><p><a href="https://github.com/golang/go/pull/32138；" target="_blank" rel="noopener">https://github.com/golang/go/pull/32138；</a></p></blockquote><p>内存优化：在内存复用，我们发现报文直接解析会产生大量临时对象。SOFAMosn 通过直接复用报文字节的方式，将必要的信息直接通过 unsafe.Pointer 指向报文的指定位置来避免临时对象的产生；</p><p>延迟优化：前面我们谈到 Sidecar 是通过只解析 Header 而透传 Body 来保证性能的。针对这一点，我们进行了协议升级，以便快速读取 Header。比如我们使用的 TR 协议请求头和 Body 均为 hessian 序列化，性能损耗较大。而 Bolt 协议中 Header 是一个扁平化 map，解析性能损耗小。因此我们升级应用改走 Bolt 协议来提升 Sidecar 转发的性能。这是一个典型的针对 Sidecar 特性而做的优化；</p><p>此外还有前面特意重点介绍的路由缓存优化（也就是那个不科学的延迟降低 7% 的场景）。由于蚂蚁金服内部路由的复杂性（一笔请求经常需要走多种路由策略最终确定路由结果目标），通过对相同条件的路由结果做秒级缓存，我们成功将某核心链路的全链路 RT 降低 7%。</p><p>这里我简单给出了上述几个典型案例，双十一之后会有更多更详细的 SOFAMosn 资料分享出来，有兴趣的同学可以多关注。<br>在双十一过后，我们也将加大 SOFAMosn 在开源上的投入，将 SOFAMosn 做更好地模块化地抽象，并且将双十一中经过考验的各种优化放进去，预计在 2020 年的 1 月底可以发布第一个优化后的版本。</p><h2 id="Mixer-的性能优化"><a href="#Mixer-的性能优化" class="headerlink" title="Mixer 的性能优化"></a>Mixer 的性能优化</h2><p>vMixer 的性能优化是个老生常谈的话题，基本上只要谈及 Istio 的性能，都避无可避。</p><p><strong>Mixer 的性能问题，一直都是 Istio 中最被人诟病的地方。</strong></p><p>尤其在 Istio 1.1/1.2 版本之后，引入 Out-Of-Process Adapter 之后，更是雪上加霜。</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573178175/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/9a4469ed722e58f706e0a5ad90eed36b_j05aiy.png" alt="ppt-15.png"></p><p>原来 Sidecar 和 Mixer 之间的远程调用已经严重影响性能，在引入 Out-Of-Process Adapter 之后又在 Traffic 流程中引入了新的远程调用，性能更加不可接受。</p><p>从落地的角度看，<strong>Mixer V1</strong> 糟糕至极的性能，已经是“生命无法承受之重”。对于一般规模的生产级落地而言，Mixer 性能已经是难于接受，更不要提大规模落地……</p><p>Mixer V2 方案则给了社区希望：将 Mixer 合并进 Sidecar，引入 web assembly 进行 Adapter 扩展，这是我们期待的 Mixer 落地的正确姿势，是 Mixer 的未来，是 Mixer 的”诗和远方”。然而社区望穿秋水，但 Mixer V2 迟迟未能启动，长期处于 In Review 状态，远水解不了近渴。</p><p>因此在 Mixer 落地上，我们只能接受妥协方案，所谓”眼前的苟且”：一方面我们弃用 Mixer v1，改为在 SOFAMosn 中直接实现功能；另一方面我们并没有实现 Mixer V2 的规划。实际的落地方式是：我们只在 SOFAMosn 中提供最基本的策略检查功能如限流，鉴权等，另外可观测性相关的各种能力也都是从 SOFAMosn 直接输出。</p><h2 id="Pilot-的性能优化"><a href="#Pilot-的性能优化" class="headerlink" title="Pilot 的性能优化"></a>Pilot 的性能优化</h2><p>在 Istio 中，Pilot 是一个被 Mixer 掩盖的重灾区：长期以来大家的性能关注点都在 Mixer，表现糟糕而且问题明显的 Mixer 一直在吸引火力。但是当选择放弃 Mixer（典型如官方在 Istio 新版本中提供的关闭 Mixer 的配置开关）之后，Pilot 的性能问题也就很快浮出水面。</p><p>这里简单展示一下我们在 Pilot 上做的部分性能优化：</p><ul><li>序列化优化：我们全面使用 types.Any 类型，弃用 types.Struct 类型，序列化性能提升 70 倍，整体性能提升 4 倍。Istio 最新的版本中也已经将默认模式修改为 types.Any 类型。我们还进行了 CR(CustomResource) 的序列化缓存，将序列化时机从 Get/List 操作提前至事件触发时，并缓存结果。大幅降低序列化频率，压测场景下整体性能提升 3 倍，GC 频率大幅下降；</li><li>预计算优化：支持 Sidecar CRD 维度的 CDS /LDS/RDS 预计算，大幅降低重复计算，压测场景下整体性能提升 6 倍；支持 Gateway 维度的 CDS / LDS / RDS 预计算；计算变更事件的影响范围，支持局部推送，减少多余的计算和对无关 Sidecar 的打扰；</li><li>推送优化：支持运行时动态降级，支持熔断阈值调整，限流阈值调整，静默周期调整，日志级别调整；实现增量 ADS 接口，在配置相关处理上，Sidecar cpu 减少 90%，Pilot cpu 减少 42%；</li></ul><p>这里简单解释一下，Pilot 在推送数据给 Sidecar 时，代码实现上的有些简单：Sidecar 连接上 Pilot 时；Pilot 就给 Sidecar 下发 xDS 数据。假定某个服务有 100 个实例，则这 100 个实例的 Sidecar 连接到 Pilot 时，每次都会进行一次下发数据的计算，然后进行序列化，再下发给连上来的 Sidecar。下一个 Sidecar 连接上来时，重复这些计算和序列化工作，而不管下发的数据是否完全相同，我们称之为“千人千面”。</p><p>而实际中，同一个服务往往有多个实例，Pilot 下发给这些实例的 Sidecar 的数据往往是相同的。因此我们做了优化，提前做预计算和序列化并缓存结果，以便后续重复的实例可以直接从缓存中取。因此，“千人千面”就可以优化为“千人百面”或者“千人十面”，从而大幅提高性能。</p><p>另外，对于整个 Service Mesh 体系，Pilot 至关重要。因此 Pilot 本身也应该进行保护，也需要诸如熔断 / 限流等特性。</p><h2 id="Service-Mesh-的运维"><a href="#Service-Mesh-的运维" class="headerlink" title="Service Mesh 的运维"></a>Service Mesh 的运维</h2><p>在 Service Mesh 的运维上，我们继续坚持“线上变更三板斧”原则。这里的变更，包括发布新版本，也包括修改配置，尤其特指修改 Istio 的 CRD。</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573178175/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/04960fe09a6f9be96a24b957e64b83c4_qktckn.png" alt="ppt-17.png"></p><p>线上变更“三板斧”指的是：</p><ul><li>可灰度：任何变更，都必须是可以灰度的，即控制变更的生效范围。先做小范围内变更，验证通过之后才扩大范围；</li><li>可监控：在灰度过程中，必须能做到可监控，能了解到变更之后对系统的应用。如果没有可监控，则可灰度也就没有意义了；</li><li>可回滚：当通过监控发现变更后会引发问题时，还需要有方法可以回滚；</li></ul><p>我们在这里额外引入了一个名为“ScopeConfig”的配置变更生效范围的控制能力，即配置变更的灰度。什么是配置变更的灰度呢？</p><p>Istio 的官方实现，默认修改配置（Istio API 对应的各种 CRD）时新修改的配置会直接全量推动到所有生效的 Sidecar，即配置变更本身无法灰度。注意这里和平时说的灰度不同，比如最常见的场景，服务 A 调用服务 B，并假定服务 A 有 100 个实例，而服务 B 有 10 个 v1 版本的服务实例正在进行。此时需要更新服务 B 到新的 v2 版本。为了验证 v2 新版本，我们通常会选择先上线一个服务 B 的 v2 版本的新实例，通过 Istio 进行流量百分比拆分，比如切 1% 的流量到新的 v2 版本的，这被称为“灰度发布”。此时新的“切 1% 流量到 v2”的 CRD 被下发到服务 A 的 Sidecar，这 100 个 Sidecar 中的每个都会执行该灰度策略。如果 v2 版本有问题不能正常工作，则只影响到 1% 的流量，即此时 Istio 的灰度控制的是 CRD 配置生效之后 Sidecar 的流量控制行为。</p><p>但是，实际生产中，配置本身也是有风险的。假设在配置 Istio CRD 时出现低级错误，不小心将新旧版本的流量比例配反了，错误配置成了 99% 的流量去 v2 版本。则当新的 CRD 配置被下发到全部 100 个服务 A 的实例时并生效时， Sidecar 控制的流量就会发生非常大的变化，造成生产事故。</p><p>为了规避这个风险，就必须引入配置变更的范围控制，比如将新的 CRD 配置下发到少数 Sidecar，验证配置无误后再扩展到其他 Sidecar。</p><h2 id="应用平滑迁移的终极方案"><a href="#应用平滑迁移的终极方案" class="headerlink" title="应用平滑迁移的终极方案"></a>应用平滑迁移的终极方案</h2><p>在 Service Mesh 落地的过程中，现有应用如何平滑迁移到 Service Mesh，是一个至关重要的话题。典型如基于传统微服务框架如 SpringCloud/Dubbo 的应用，如何逐个（或者分批）的迁移到 Service Mesh 上。</p><p>蚂蚁金服在去年进行落地实践时，就特别针对应用平滑迁移进行了深入研究和探索。这个问题是 Service Mesh 社区非常关注的核心落地问题，今天我们重点分享。</p><p>在今年 9 月份的云栖大会上，蚂蚁金服推出了双模微服务的概念，如下图所示：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573178175/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/ba16ec5865cb61a6bb0ffc239ce46bbd_thrwkm.jpg" alt="ppt-18.png"></p><p>“双模微服务”是指传统微服务和 Service Mesh 双剑合璧，即“基于 SDK 的传统微服务”可以和“基于 Sidecar 的 Service Mesh 微服务”实现下列目标：</p><ul><li>互联互通：两个体系中的应用可以相互访问；</li><li>平滑迁移：应用可以在两个体系中迁移，对于调用该应用的其他应用，做到透明无感知；</li><li>灵活演进：在互联互通和平滑迁移实现之后，我们就可以根据实际情况进行灵活的应用改造和架构演进；</li></ul><p>双模还包括对应用运行平台的要求，即两个体系下的应用，既可以运行在虚拟机之上，也可以运行在容器 /k8s 之上。</p><p>怎么实现这么一个美好的双模微服务目标呢？</p><p>我们先来分析一下传统微服务体系和 Service Mesh 体系在服务注册 / 服务发现 / 服务相关的配置下发上的不同。</p><p>首先看传统微服务体系，其核心是服务注册中心 / 配置中心，应用通过引用 SDK 的方式来实现对接各种注册中心 / 配置中心。通常不同的注册中心 / 配置中心都有各自的实现机制和接口协议，SDK 和注册中心 / 配置中心的交互方式属于内部实现机制，并不通用。</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573178174/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/b8aaf50dcc6005b54704c8b47969b133_s8mjmh.png" alt="ppt-19.png"></p><p>优点是支持海量数据（十万级别甚至百万级别），具备极强的分发能力，而且经过十余年间的打磨，稳定可靠可谓久经考验。市面上有很多成熟的开源产品，各大公司也都有自己的稳定实现。如阿里集团的 Nacos，蚂蚁金服的 SOFARegistry。</p><blockquote><p>SOFARegistry：<br><a href="https://github.com/sofastack/sofa-registry" target="_blank" rel="noopener">https://github.com/sofastack/sofa-registry</a></p></blockquote><p>缺点是注册中心 / 配置中心与 SDK 通常是透传数据，即注册中心 / 配置中心只进行数据的存储和分发。大量的控制逻辑需要在 SDK 中实现，而 SDK 是嵌入到应用中的。因此，任何变更都需要改动 SDK 并要求应用升级。</p><p>再来看看 Service Mesh 方案，以 Istio 为例：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573178175/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/ba198ff9e1cdc7dff6d9ab7e62f9de94_a2j8lz.png" alt="ppt-19-2.png"></p><p>Service Mesh 的优点是引入了控制平面（在 Istio 中具体指 Pilot 组件），通过控制平面来提供强大的控制逻辑。而控制平面的引入，MCP/xDS 等标准协议的制订，实现了数据源和下发数据的解耦。即存储于注册中心 / 配置中心（在 Istio 中体现为 k8s api server + Galley）的数据可以有多种灵活的表现形式，如 CRD 形式的 Istio API，通过运行于 Pilot 中的 Controller 来实现控制逻辑和格式转换，最后统一转换到 xDS/UDPA。这给 API 的设计提供了非常大的施展空间，极具灵活度，扩展性非常好。</p><p>缺点也很明显，和成熟的注册中心 / 配置中心相比，支持的容量有限，下发的性能和稳定性相比之下有很大差距。</p><p>控制平面和传统注册中心 / 配置中心可谓各有千秋，尤其他们的优缺点是互补的，如何结合他们的优势？</p><p>此外，<strong>如何打通两个体系是 Service Mesh 社区的老大难问题。</strong> 尤其是缺乏标准化的社区方案，只能自行其是，各自为战。</p><p>最近，在综合了过去一年多的思考和探索之后，蚂蚁金服和阿里集团的同事们共同提出了一套完整的解决方案，我们戏称为“终极方案”：希望可以通过这个方案打通传统微服务体系和 Service Mesh 体系，彻底终结这个困扰已久的问题。</p><p>这个方案的核心在于：<strong>以 MCP 和 xDS/UDPA协议为基础，融合控制平面和传统注册中心 / 配置中心。</strong> </p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573178175/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/985e2a35f4ffb7f20a0c0b58777a904e_r6021q.png" alt="ppt-20.png"></p><p>如上图所示，如果我们将融合控制平面和传统注册中心 / 配置中心而来的新的产品形态视为一个整体，则这个新产品形态的能力主要有三块：</p><ol><li>传统注册中心的数据存储能力：支持海量数据；</li><li>Service Mesh 控制平面的能力：解耦之后 API 设计的弹性和灵活度；</li><li>传统注册中心的分发能力：性能、速度、稳定性；</li></ol><p>这个新的产品形态可以理解为“带控制平面的注册中心 / 配置中心”，或者“存储 / 分发能力加强版的控制平面”。名字不重要，重要的是各节点的通讯交互协议必须标准化：</p><ul><li>MCP 协议：MCP 协议是 Istio 中用 于 Pilot 和 Galley 之间同步数据的协议，源自 xDS 协议。我们设想通过 MCP 协议将不同源的注册中心集成起来，目标是聚合多注册中心的数据到 Pilot 中，实现打通异构注册中心（未来也会用于多区域聚合）。</li><li>xDS/UDPA 协议：xDS 协议源自 Envoy，是目前数据平面的事实标准，UDPA 是正在进行中的基于 xDS 协议的标准化版本。Sidecar 基于 xDS/UDPA 协议接入控制平面，我们还有进一步的设想，希望加强 SDK 方案，向 Istio 的功能靠拢，具体表现为 SDK 支持 xDS 协议（初期版本先实现最小功能集）。目标是希望在对接控制平面的前提下，应用可以在 Service Mesh 和 SDK 方案之间自由选择和迁移。<br>基于这个思路，我们给出如下图所示的解决方案，希望最大限度的整合传统微服务框架和 Service Mesh。其基本指导原则是：<strong>求同存异，保持兼容。</strong></li></ul><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573179051/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/871a4373f591669219689180bd9054c7_dsgavo.png" alt="ppt-21.png"></p><p>上图中，蓝色部分是通用的功能模块，我们希望可以和社区一起共建。红色部分是不兼容的功能模块，但是保持 API 兼容。</p><p>具体说，右边是各种注册中心（配置中心同理）：</p><ul><li>Galley 和底下的 k8s API Server 可以视为一个特殊的注册中心，这是 Istio 的官方方式；</li><li>Nacos/SOFARegistry 是阿里集团和蚂蚁金服的注册中心，支持海量规模。我们计划添加 MCP 协议的支持，直接对接 Pilot；</li><li>其他的注册中心，也可以通过提供 MCP 协议支持的方式，接入到这个方案中；</li><li>对于不支持 MCP 的注册中心，可以通过开发一个 MCP Proxy 模块以适配器模式的方式间接接入。当然最理想的状态是出现成熟的通用开源方案来-统一解决，比如 Nacos Sync 有计划做类似的事情；</li></ul><p>左边是数据平面：</p><ul><li>Service Mesh 体系下的 Sidecar（如 Envoy 和蚂蚁金服的 SOFAMosn）目前都已经支持 xDS/UDPA；</li><li>相对来说，这个方案中比较“脑洞”的是在 SDK 方案如 Spring Cloud/Dubbo/SOFARPC 中提供 xDS 的支持，以便对接到已经汇总了全局数据的控制平面。从这个角度说，支持 xDS 的 SDK 方案，也可以视为广义的数据平面。我们希望后面可以推动社区朝这个方向推进，短期可以先简单对接，实现 xDS 的最小功能集；长期希望 SDK 方案的功能能向 Istio 看齐，实现更多的 xDS 定义的特性；</li><li>这个方案对运行平台没有任何特别要求，只要网络能通，应用和各个组件可以灵活选择运行在容器（k8s）中或虚拟机中。</li></ul><p>需要特别强调的是，这个方案最大的优点在于它是一个高度标准化的社区方案：通过 MCP 协议和 xDS 协议对具体实现进行了解耦和抽象，整个方案没有绑定到任何产品和供应商。因此，我们希望这个方案不仅仅可以用于阿里集团和蚂蚁金服，也可以用于整个 Istio 社区。阿里集团和蚂蚁金服目前正在和 Istio 社区联系，我们计划将这个方案贡献出来，并努力完善和加强 Pilot 的能力，使之能够满足我们上面提到的的美好愿景：融合控制平面和传统注册中心 / 配置中心的优点，打通传统微服务框架和 Service Mesh，让应用可以平滑迁移灵活演进。</p><p>希望社区认可这个方案的同学可以参与进来，和我们一起努力来建设和完善它。</p><h1 id="是否采用-Service-Mesh-的建议"><a href="#是否采用-Service-Mesh-的建议" class="headerlink" title="是否采用 Service Mesh 的建议"></a>是否采用 Service Mesh 的建议</h1><p>在过去一年间，这个问题经常被人问起。借这个机会，结合过去一年中的实践，以及相比去年此时更多的心得和领悟，希望可以给出一些更具参考价值的建议。</p><center> 建议一：有没有直接痛点 </center><p>有没有短期急迫需求，通常取决于当前有没有迫切需要解决的痛点。<br>在 Service Mesh 的发展过程中，有两个特别清晰而直接的痛点，它们甚至对 Service Mesh 的诞生起了直接的推动作用：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573180592/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/6d03b6eb52064931afaec57faec15708_fvfsli.png" alt="ppt-23.png"></p><h2 id="多语言支持"><a href="#多语言支持" class="headerlink" title="多语言支持"></a>多语言支持</h2><p>这是 SDK 方案的天然局限，也是 Service Mesh 的天然优势。需要支持的编程语言越多，为每个编程语言开发和维护一套 SDK 的成本就越高，就有越多的理由采用 Service Mesh。</p><h3 id="类库升级困难"><a href="#类库升级困难" class="headerlink" title="类库升级困难"></a>类库升级困难</h3><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573180592/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/24b236fa51314083a2c7527a1fecfc0b_fa3o9z.png" alt="ppt-23-2.png"></p><p>同样，这也是 SDK 方案的天然局限，也是 Service Mesh 的天然优势（还记得前面那个不科学的 -7% 吗？）。SDK 方案中类库和业务应用打包在一起，升级类库就不得不更新整个业务应用，而且是需要更新所有业务团队的所有应用。在大部分公司，这通常是一个非常困难的事情，而且每次 SDK 升级都要重复一次这种痛苦。</p><p>而且，这两个痛点有可能会同时存在：有多个编程语言的类库需要升级版本……</p><p>所以，第一个建议是先检查是否存在这两个痛点。</p><center> 建议二：老应用升级改造 </center><p>Service Mesh 的无侵入性，在老应用升级改造，尤其是希望少改代码甚至完全不改代码的情况下，堪称神器。</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573180591/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/6332252c3e62adcf3f4ac99419a3b172_lerrvx.jpg" alt="ppt-24.png"></p><p>所以，第二个建议是，如果有老应用无改动升级改造的需求，对流量控制、安全、可观测性有诉求，则可以考虑采用  Service Mesh。</p><center> 建议三：维护统一的技术栈 </center><p>这个建议仅仅适用于技术力量相对薄弱的企业，这些企业普遍存在一个问题：技术力量不足，或者主要精力投放在业务实现，导致无力维护统一的技术栈，系统呈现烟囱式架构。</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573180591/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/96ec90e49af171881832820ee1853434_fmhaif.jpg" alt="ppt-25.png"></p><p>传统烟囱式架构的常见问题有：</p><ul><li>重复建设，重复造轮子；</li><li>不同时期，不同厂商，用不同的轮子；</li><li>难以维护和演进，后续成本高昂；</li><li>掌控力不足，容易受制于人；</li></ul><p>这种情况下，建议引入 Service Mesh 技术，通过 Service Mesh 将非业务逻辑从应用剥离并下沉的特性，来统一整个公司的技术栈。<br>特别需要强调的是，对于技术力量不足、严重依赖外包和采购的企业，尤其是银行 / 保险 / 证券类金融企业，引入 Service Mesh 会有一个额外的特殊功效，至关重要：</p><p>将乙方限制在业务逻辑的实现上</p><p>即企业自行建设和控制 Service Mesh，作为统一的技术栈，在其上再开发运行业务应用。由于这些业务应用运行在 Servcie Mesh 之上，因此只需要实现业务逻辑，非业务逻辑的功能由 Servcie Mesh 来提供。通过这种方式，可以避免乙方公司借项目机会引入各种技术栈而造成技术栈混乱，导致后期维护成本超高；尤其是要避免引入私有技术栈，因为私有技术栈会造成对甲方事实上的技术绑定（甚至技术绑架）。</p><center> 建议四：云原生落地 </center><p>最后一个建议，和云原生有关。在去年的 QCon 演讲中，我曾经提到我们在探索 Kubernetes / Service Mesh / Serverless 结合的思路。在过去一年，蚂蚁金服一直在云原生领域做深度探索，也有一些收获。其中，有一点我们是非常明确的：<strong>Mesh 化是云原生落地的关键步骤。</strong></p><p>下图展示了蚂蚁金服在云原生落地方面的基本思路：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573180592/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/c8e92254d26180aecb7e8786bf551058_ajnylq.png" alt="ppt-27.png"></p><ul><li>最下方是云，以 Kubernetes 为核心，关于这一点社区基本已经达成共识：Kubernetes 就是云原生下的操作系统；</li><li>在 Kubernetes 之上，是 Mesh 层。不仅仅有我们熟悉的 Service Mesh，还有诸如 Database Mesh 和 Message Mesh 等类似的其他 Mesh 产品形态，这些 Mesh 组成了一个标准化的通信层；</li><li>运行在各种 Mesh 的应用，不管是微服务形态，还是传统非微服务形态，都可以借助 Mesh 的帮助实现应用轻量化，非业务逻辑的各种功能被剥离到 Mesh 中后，应用得以“瘦身减负”；</li><li>瘦身之后的应用，其内容主要是业务逻辑实现。这样的工作负载形式，更适合 Serverless 的要求，为接下来转型 Serverless 做好准备；</li></ul><p>所以，我的最后一个建议是，请结合你的长远发展方向考虑：如果云原生是你的诗和远方，那么 Service Mesh 就是必由之路。</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573180592/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/22521b91cec58acee5ef41d600c5bae8_yzjzsu.png" alt="ppt-28.png"></p><p>Kubernetes / Service Mesh / Serverless 是当下云原生落地实践的三驾马车，相辅相成，相得益彰。</p><center> Service Mesh 的核心价值 </center><p>在最后，重申一下 Service Mesh 的核心价值：</p><p>实现业务逻辑和非业务逻辑的分离。</p><p>前面的关于要不要采用 Service Mesh 四个建议，归根到底，最终都是对这个核心价值的延展。只有在分离业务逻辑和非业务逻辑并以 Sidecar 形式独立部署之后，才有了这四个建议所依赖的特性：<br>Service Mesh 的多语言支持和应用无感知升级；</p><p>无侵入的为应用引入各种高级特性如流量控制，安全，可观测性；</p><p>形成统一的技术栈；</p><p>为非业务逻辑相关的功能下沉到基础设施提供可能，帮助应用轻量化，使之专注于业务，进而实现应用云原生化；</p><p>希望大家在理解 Service Mesh 的核心价值之后，再来权衡要不要采用 Service Mesh，也希望我上面给出的四个建议可以对大家的决策有所帮助。</p><h1 id="总-结"><a href="#总-结" class="headerlink" title="总   结"></a>总   结</h1><p>在今天的内容中，首先介绍了蚂蚁金服 Service Mesh 的发展历程，给大家展示了双十一大规模落地的规模和性能指标，并解释了这些指标背后的原理。然后分享了蚂蚁金服在 Service Mesh 大规模落地中遇到的困难和挑战，以及我们为此做的工作，重点介绍了应用平滑迁移的所谓“终极方案”；最后结合蚂蚁金服在云原生和 Service Mesh 上的实践心得，对于是否应该采用 Service Mesh 给出了几点建议。</p><p>目前蚂蚁金服正在静待今年的双十一大考，这将是 Service Mesh 的历史时刻：全球最大规模的 Service Mesh 集群，Service Mesh 首次超大规模部署…… 一切都是如此的值得期待。</p><p>请对 Service Mesh 感兴趣的同学稍后继续关注，预期在双十一之后会有一系列的分享活动：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573180591/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/30cf8b6b693807c8e1aae0a4aa04dad1_skkjmn.png" alt="ppt-31-1.png"></p><ul><li>经验分享：会有更多的技术分享，包括落地场景，经验教训，实施方案，架构设计…</li><li>开源贡献：蚂蚁金服会将落地实践中的技术实现和方案以不同的方式回馈社区，推动 Service Mesh 落地实践。目前这个工作正在实质性的进行中， 请留意我们稍后公布的消息；</li><li>商务合作：蚂蚁金服即将推出 Service Mesh 产品，提供商业产品和技术支持，提供金融级特性，欢迎联系；</li><li>社区交流：ServiceMesher 技术社区继续承担国内 Service Mesh 布道和交流的重任；欢迎参加我们今年正在持续举办的 Service Mesh Meetup 活动。</li></ul><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1573180592/blog/servermesh%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5/9d7bc39127fd9682851c8d8b5ff3ba54_mjcxbz.jpg" alt="ppt-32.png"></p><p>今年是我在 QCon 演讲的第三年，这三年中的三次演讲，可以说是从一个侧面反映了国内 Service Mesh 发展的不同阶段：</p><p>2017 年，国内 Service Mesh 一片蛮荒的时候，我做了 Service Mesh 的布道，介绍了 Service Mesh 的原理，喊出了“下一代微服务”的口号 ;</p><p>2018 年，以蚂蚁金服为代表的国内互联网企业，陆陆续续开始了 Service Mesh 的落地探索，所谓摸着石头过河不外如是。第二次演讲我分享了蚂蚁金服的探索性实践，介绍了蚂蚁金服的 Service Mesh 落地方式和思路。</p><p>今天，2019 年，第三次演讲，蚂蚁金服已经建立起了全球最大规模的 Service Mesh 集群并准备迎接双十一的严峻挑战，这次的标题也变成了深度实践。</p><p>从布道，到探索，再到深度实践，一路走来已是三年，国内的 Service Mesh 发展，也从籍籍无名，到炙手可热，再到理性回归。Service Mesh 的落地，依然还存在非常多的问题，距离普及还有非常远的路要走，然而 Service Mesh 的方向，已经被越来越多的人了解和认可。</p><p>高晓松说：”生活不止眼前的苟且，还有诗和远方”。对于 Service Mesh 这样的新技术来说，也是如此。<br>鸣谢 InfoQ 和 Qcon 提供的机会，让我得以每年一次的为大家分享 Service Mesh 的内容。2020 年，蚂蚁金服将继续推进和扩大 Service Mesh 落地的规模，继续引领 Service Mesh 在金融行业的实践探索。希望明年，可以有更多更深入的内容带给大家！</p><h2 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h2><p>敖小剑，蚂蚁金服高级技术专家，十七年软件开发经验，微服务专家，Service Mesh 布道师，ServiceMesher 社区联合创始人。专注于基础架构和中间件，Cloud Native 拥护者，敏捷实践者，坚守开发一线打磨匠艺的架构师。曾在亚信、爱立信、唯品会等任职，目前就职蚂蚁金服，在中间件团队从事 Service Mesh/ Serverless 等云原生产品开发。本文整理自 10 月 18 日在 QCon 上海 2019 上的演讲内容。  </p><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>我在一家创业公司的时候有过多语言的经历，当时主要 Web 端有 Java 和 Go，其它还有 Python 和 Php的，每次改动需要更新各个语言的SDK，当时就在想我们难道不能有一个跨语言的一站式方案吗。</p><p>我在做偏老派的 Java 开发的时候特别烦的一件事情就是各种 SDK ，如果 SDK 有漏洞重新发布需要通知到各个服务 Owner 更改，人少的时候吼一声可能就解决了，等团队的人越来越多，即使在群里 @ 了大家，也不一定能普及到，你可能需要一个一个去确认，往往需要折腾个几天才改完，低效乏味。</p><blockquote><p>经历过痛苦的人才会更加憧憬美好</p></blockquote><p>这篇文章给了我非常大的感触，知道小剑也有一年多了，真心羡慕走在前沿的大佬。 我从15年认识了 Java，到17年认识了 docker 和 kubernetes， 给了我巨大的冲击， 18年认识了 服务网格，servless，听到云原声的赞歌，现在我后悔了，我只是一个 Java 开发让我不满，告诫自己保持一颗热爱的心，希望自己在2020年能和云原生牵上线。</p>]]></content>
      
      
      <categories>
          
          <category> Service Mesh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> Service Mesh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模版模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/template-pattern/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/template-pattern/</url>
      
        <content type="html"><![CDATA[<p>[go] Template Pattern</p><a id="more"></a> <h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Template Pattern（模板模式）</p><blockquote><p>白话文<br>定一个“抽象类”，定义一个方法A，定义需要子类实现的方法，所有子类对象在执行A的时候，会调用各自实现的方法。</p></blockquote><p>在golang中，由于不存在抽象类和真正的继承，所以只能通过一个基础类来充当抽象类，子类通过组合基础类来实现通用方法的继承</p><blockquote><p>故事<br>阳光明媚的一天，我家来了位香港的朋友（毕竟那边太乱），我们决定一起做一桌菜，于是他做香港菜，我做杭州菜，比拼就这么开始了</p></blockquote><h2 id="实际代码例子"><a href="#实际代码例子" class="headerlink" title="实际代码例子"></a>实际代码例子</h2><h3 id="普通例子"><a href="#普通例子" class="headerlink" title="普通例子"></a>普通例子</h3><blockquote><p>代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cooking <span class="keyword">interface</span> &#123;</span><br><span class="line">DoOperate()</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AbstractCooking <span class="keyword">struct</span> &#123;</span><br><span class="line">Cooking</span><br><span class="line">Prepare    <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">GetContent</span> <span class="title">func</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(d AbstractCooking)</span> <span class="title">DoOperate</span><span class="params">()</span></span> &#123;</span><br><span class="line">d.Prepare()</span><br><span class="line">fmt.Println(<span class="string">"烹饪内容:"</span>, d.GetContent())</span><br><span class="line">fmt.Println(<span class="string">"烹饪完成"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HZCooking <span class="keyword">struct</span> &#123;</span><br><span class="line">AbstractCooking</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHZCooking</span><span class="params">()</span> *<span class="title">HZCooking</span></span> &#123;</span><br><span class="line">c := <span class="built_in">new</span>(HZCooking)</span><br><span class="line">c.AbstractCooking.GetContent = c.GetContent</span><br><span class="line">c.AbstractCooking.Prepare = c.Prepare</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *HZCooking)</span> <span class="title">GetContent</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"杭州菜."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *HZCooking)</span> <span class="title">Prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">" -- 准备杭州菜 -- "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HkCooking <span class="keyword">struct</span> &#123;</span><br><span class="line">HZCooking</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHKCooking</span><span class="params">()</span> *<span class="title">HkCooking</span></span> &#123;</span><br><span class="line">c := <span class="built_in">new</span>(HkCooking)</span><br><span class="line">c.AbstractCooking.GetContent = c.GetContent</span><br><span class="line">c.AbstractCooking.Prepare = c.Prepare</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *HkCooking)</span> <span class="title">GetContent</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"香港菜."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *HkCooking)</span> <span class="title">Prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">" -- 准备香港菜 -- "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCooking</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">chinaCooking := NewHZCooking()</span><br><span class="line"></span><br><span class="line">chinaCooking.DoOperate()</span><br><span class="line"></span><br><span class="line">hkCooking := NewHKCooking()</span><br><span class="line"></span><br><span class="line">hkCooking.DoOperate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> -- 准备杭州菜 -- </span><br><span class="line">烹饪内容: 杭州菜.</span><br><span class="line">烹饪完成</span><br><span class="line"> -- 准备香港菜 -- </span><br><span class="line">烹饪内容: 香港菜.</span><br><span class="line">烹饪完成</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.tutorialspoint.com/design_pattern/template_pattern.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/design_pattern/template_pattern.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/decorator-pattern/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/decorator-pattern/</url>
      
        <content type="html"><![CDATA[<p>[go] Decorator Pattern</p><a id="more"></a> <h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Decorator Pattern（装饰模式）</p><blockquote><p>This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact.</p></blockquote><blockquote><p>白话文</p></blockquote><p>这个模式我们需要创建一个新的装饰类，然后装饰类会拥有一个属性是被装饰类，并且会有“一个”方法和需要使用的被装饰类的方法签名完全一致，调用装饰类的方法会执行装饰类内容并调用被装饰类的被装饰方法。</p><blockquote><p>故事</p></blockquote><p>我买了一本书《go编程思想》，小明也买了一本书《go编程思想》并给它带上了一个黄金封面，两本书内容一摸一样，只是小明的变成金灿灿的土豪版。</p><h2 id="实际代码例子"><a href="#实际代码例子" class="headerlink" title="实际代码例子"></a>实际代码例子</h2><h3 id="普通例子"><a href="#普通例子" class="headerlink" title="普通例子"></a>普通例子</h3><p>对于某个接口的方法装饰</p><blockquote><p>代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">draw()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(shape Circle)</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Shape: Circle"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(shape Rectangle)</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Shape: Rectangle"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ShapeDecorator <span class="keyword">struct</span> &#123;</span><br><span class="line">decoratorShape Shape</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(shape ShapeDecorator)</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">shape.decoratorShape.draw()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RedShapeDecorator <span class="keyword">struct</span> &#123;</span><br><span class="line">ShapeDecorator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRedShapeDecorator</span><span class="params">(s Shape)</span> *<span class="title">RedShapeDecorator</span></span> &#123;</span><br><span class="line">d := <span class="built_in">new</span>(RedShapeDecorator)</span><br><span class="line">d.decoratorShape = s</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(shape RedShapeDecorator)</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">shape.ShapeDecorator.draw()</span><br><span class="line">fmt.Println(<span class="string">"red"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BlueShapeDecorator <span class="keyword">struct</span> &#123;</span><br><span class="line">ShapeDecorator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlueShapeDecorator</span><span class="params">(s Shape)</span> *<span class="title">BlueShapeDecorator</span></span> &#123;</span><br><span class="line">d := <span class="built_in">new</span>(BlueShapeDecorator)</span><br><span class="line">d.decoratorShape = s</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(shape BlueShapeDecorator)</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">shape.ShapeDecorator.draw()</span><br><span class="line">fmt.Println(<span class="string">"blue"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestName</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">redShapedDecorator := NewRedShapeDecorator(Circle&#123;&#125;)</span><br><span class="line">redShapedDecorator.draw()</span><br><span class="line"></span><br><span class="line">redShapedDecorator = NewRedShapeDecorator(Rectangle&#123;&#125;)</span><br><span class="line">redShapedDecorator.draw()</span><br><span class="line"></span><br><span class="line">blueShapedDecorator := NewBlueShapeDecorator(Circle&#123;&#125;)</span><br><span class="line">blueShapedDecorator.draw()</span><br><span class="line"></span><br><span class="line">blueShapedDecorator = NewBlueShapeDecorator(Rectangle&#123;&#125;)</span><br><span class="line">blueShapedDecorator.draw()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Shape: Circle</span><br><span class="line">red</span><br><span class="line">Shape: Rectangle</span><br><span class="line">red</span><br><span class="line">Shape: Circle</span><br><span class="line">blue</span><br><span class="line">Shape: Rectangle</span><br><span class="line">blue</span><br></pre></td></tr></table></figure><h3 id="直接装饰方法"><a href="#直接装饰方法" class="headerlink" title="直接装饰方法"></a>直接装饰方法</h3><blockquote><p>代码如下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> drawFunc <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">CircleDraw</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Shape: Circle"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadCircleDraw</span><span class="params">(d drawFunc)</span> <span class="title">drawFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">d()</span><br><span class="line">fmt.Println(<span class="string">"red"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFunc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> drawFunc drawFunc</span><br><span class="line">drawFunc = CircleDraw</span><br><span class="line">drawFunc()</span><br><span class="line"></span><br><span class="line">drawFunc = ReadCircleDraw(drawFunc)</span><br><span class="line">drawFunc()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Shape: Circle</span><br><span class="line">Shape: Circle</span><br><span class="line">red</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.tutorialspoint.com/design_pattern/decorator_pattern.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/design_pattern/decorator_pattern.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片添加水印</title>
      <link href="/go/watermark01/"/>
      <url>/go/watermark01/</url>
      
        <content type="html"><![CDATA[<p>[go] WaterMark, base on freetype, image.draw </p><a id="more"></a> <p>既然开始写博客，就需要给图片加水印，之前用Java写过一个已经找不到影踪，只记得Java写的还比较麻烦。最近又在重温go的内容，就顺便用go写了下图片加水印的代码</p><h1 id="输出文字图片"><a href="#输出文字图片" class="headerlink" title="输出文字图片"></a>输出文字图片</h1><h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571535791/blog/watermask/wattermark-1-wm-1571388899_hojx8n.png" alt="效果图："></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>依赖 <code>github.com/golang/freetype</code> 仓库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> WaterMark <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// freetype的参数</span></span><br><span class="line">width    <span class="keyword">int</span>     <span class="comment">// 图片的大小 宽度</span></span><br><span class="line">height   <span class="keyword">int</span>     <span class="comment">// 图片的大小 高度</span></span><br><span class="line">fontSize <span class="keyword">float64</span> <span class="comment">// 字体尺寸</span></span><br><span class="line">fontDPI  <span class="keyword">float64</span> <span class="comment">//   屏幕每英寸的分辨率</span></span><br><span class="line">fontFile <span class="keyword">string</span>  <span class="comment">// 需要使用的字体文件</span></span><br><span class="line"></span><br><span class="line">srcPath <span class="keyword">string</span> <span class="comment">// 原文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wm *WaterMark)</span> <span class="title">CreateStringPic</span><span class="params">(srcPath, content <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 新建一个 指定大小的RGBA位图</span></span><br><span class="line">img := image.NewNRGBA(image.Rect(<span class="number">0</span>, <span class="number">0</span>, wm.width, wm.height))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画背景</span></span><br><span class="line"><span class="comment">//for y := 0; y &lt; wm.height; y++ &#123;</span></span><br><span class="line"><span class="comment">//for x := 0; x &lt; wm.width; x++ &#123;</span></span><br><span class="line"><span class="comment">//// 设置某个点的颜色，依次是 RGBA，变化的</span></span><br><span class="line"><span class="comment">//img.Set(x, y, color.RGBA&#123;255, 255, 255, 255&#125;)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读字体数据</span></span><br><span class="line">fontBytes, err := ioutil.ReadFile(wm.fontFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">font, err := freetype.ParseFont(fontBytes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := freetype.NewContext()</span><br><span class="line">c.SetDPI(wm.fontDPI)</span><br><span class="line">c.SetFont(font)</span><br><span class="line">c.SetFontSize(wm.fontSize)</span><br><span class="line">c.SetClip(img.Bounds())</span><br><span class="line">c.SetDst(img)</span><br><span class="line">c.SetSrc(image.Black)</span><br><span class="line"></span><br><span class="line">pt := freetype.Pt(<span class="number">15</span>, <span class="number">30</span>+<span class="keyword">int</span>(c.PointToFixed(wm.fontSize)&gt;&gt;<span class="number">8</span>)) <span class="comment">// 字出现的位置</span></span><br><span class="line"></span><br><span class="line">_, err = c.DrawString(content, pt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create(makePath(srcPath), img)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子用到了 freetype 包，输出图片的文字内容是我的博客地址，你可以替换成自己想要的内容。</p><p>官方字体格式的说明如下：</p><blockquote><p>Drawing Font Glyphs<br>To draw a font glyph in blue starting from a point p, draw with an image.ColorImage source and an image.Alpha mask. For simplicity, we aren’t performing any sub-pixel positioning or rendering, or correcting for a font’s height above a baseline.</p></blockquote><p>结合下面的实现代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">DrawString</span><span class="params">(s <span class="keyword">string</span>, p fixed.Point26_6)</span> <span class="params">(fixed.Point26_6, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">for</span> _, <span class="keyword">rune</span> := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">advanceWidth, mask, offset, err := c.glyph(index, p) <span class="comment">// 最后会进入下个方法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fixed.Point26_6&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">p.X += advanceWidth</span><br><span class="line">glyphRect := mask.Bounds().Add(offset)</span><br><span class="line">dr := c.clip.Intersect(glyphRect)</span><br><span class="line"><span class="keyword">if</span> !dr.Empty() &#123;</span><br><span class="line">mp := image.Point&#123;<span class="number">0</span>, dr.Min.Y - glyphRect.Min.Y&#125;</span><br><span class="line">draw.DrawMask(c.dst, dr, c.src, image.ZP, mask, mp, draw.Over)</span><br><span class="line">&#125;</span><br><span class="line">prev, hasPrev = index, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">rasterize</span><span class="params">(glyph truetype.Index, fx, fy fixed.Int26_6)</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">fixed.Int26_6, *image.Alpha, image.Point, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">a := image.NewAlpha(image.Rect(<span class="number">0</span>, <span class="number">0</span>, xmax-xmin, ymax-ymin))</span><br><span class="line">c.r.Rasterize(raster.NewAlphaSrcPainter(a))</span><br><span class="line"><span class="keyword">return</span> c.glyphBuf.AdvanceWidth, a, image.Point&#123;xmin, ymin&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到用到的是 <code>image.NewAlpha</code> 和 <code>draw.DrawMask()</code>，和官方的说明一致，具体详细内容在结尾有网址查看</p><h1 id="输出图片水印"><a href="#输出图片水印" class="headerlink" title="输出图片水印"></a>输出图片水印</h1><h2 id="原图："><a href="#原图：" class="headerlink" title="原图："></a>原图：</h2><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571535804/blog/watermask/watermark-2_yyj8ak.jpg" alt="原图"></p><h2 id="效果图：-1"><a href="#效果图：-1" class="headerlink" title="效果图："></a>效果图：</h2><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571535802/blog/watermask/watermark-2-wm-1571391482_kudhos.jpg" alt="效果图："></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wm *WaterMark)</span> <span class="title">AddImage</span><span class="params">(wmPath <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">srcImg := getImage(wm.srcPath)</span><br><span class="line"></span><br><span class="line">b := srcImg.Bounds()</span><br><span class="line"></span><br><span class="line">dst := image.NewNRGBA(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘入原始图片</span></span><br><span class="line">draw.Draw(dst, b, srcImg, image.ZP, draw.Src)</span><br><span class="line"></span><br><span class="line">waterMark := getImage(wmPath)</span><br><span class="line"></span><br><span class="line">maxW := b.Max.X / <span class="number">5</span></span><br><span class="line">maxH := b.Max.Y / <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 会出现多个水印，offset位置信息</span></span><br><span class="line"><span class="keyword">for</span> offsetWidth := <span class="number">0</span>; offsetWidth &lt; b.Max.X; offsetWidth += maxW &#123;</span><br><span class="line"><span class="keyword">for</span> offsetHeight := <span class="number">0</span>; offsetHeight &lt; b.Max.X; offsetHeight += maxH &#123;</span><br><span class="line">offset := image.Pt(offsetWidth, offsetHeight)</span><br><span class="line">draw.Draw(dst, waterMark.Bounds().Add(offset), waterMark, image.ZP, draw.Over)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 固定位置</span></span><br><span class="line"><span class="comment">// offset := image.Pt((b.Bounds().Max.X-waterMark.Bounds().Max.X)/2, (b.Bounds().Max.Y-waterMark.Bounds().Max.Y)/2)</span></span><br><span class="line"><span class="comment">// draw.Draw(dst, waterMark.Bounds().Add(offset), waterMark, image.ZP, draw.Over)</span></span><br><span class="line"></span><br><span class="line">create(makePath(wm.srcPath), dst)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片加水印用到的是 draw 包的内容，相对比较简单，只需要修改中间那部分 <code>image.Pt()</code> 和 <code>draw.Draw()</code> 就可以调整位置</p><h1 id="缩放图片"><a href="#缩放图片" class="headerlink" title="缩放图片"></a>缩放图片</h1><p>缩放图片参考的是 <code>github.com/nfnt/resize</code> 包，比较简单，这里就不上效果了。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wm *WaterMark)</span> <span class="title">Resize</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">src := getImage(wm.srcPath)</span><br><span class="line"></span><br><span class="line">b := src.Bounds()</span><br><span class="line">width := b.Max.X</span><br><span class="line">height := b.Max.Y</span><br><span class="line"></span><br><span class="line">w, h := calculateRatioFit(width, height)</span><br><span class="line"><span class="comment">// 调用resize库进行图片缩放</span></span><br><span class="line">dst := resize.Resize(<span class="keyword">uint</span>(w), <span class="keyword">uint</span>(h), src, resize.Lanczos3)</span><br><span class="line"></span><br><span class="line">create(makePath(wm.srcPath), dst)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="补充代码"><a href="#补充代码" class="headerlink" title="补充代码"></a>补充代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getImage</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(image.Image)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 水印图片</span></span><br><span class="line">f, err := os.Open(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"打开水印图片异常"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">suffix := path.Ext(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> img image.Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> suffix &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".jpeg"</span>, <span class="string">".jpg"</span>:</span><br><span class="line">fmt.Println(<span class="string">"这是JPG文件"</span>)</span><br><span class="line">img, err = jpeg.Decode(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"解码jpeg图片异常"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">".png"</span>:</span><br><span class="line">fmt.Println(<span class="string">"这是PNG文件"</span>)</span><br><span class="line">img, err = png.Decode(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"解码jpeg图片异常"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(target <span class="keyword">string</span>, m image.Image)</span></span> &#123;</span><br><span class="line">imgNew, err := os.Create(target)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> imgNew.Close()</span><br><span class="line"></span><br><span class="line">suffix := path.Ext(target)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> suffix &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".jpeg"</span>, <span class="string">".jpg"</span>:</span><br><span class="line">err = jpeg.Encode(imgNew, m, &amp;jpeg.Options&#123;<span class="number">100</span>&#125;)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">".png"</span>:</span><br><span class="line">err = png.Encode(imgNew, m)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展-amp-问题"><a href="#扩展-amp-问题" class="headerlink" title="扩展&amp;问题"></a>扩展&amp;问题</h2><blockquote><p>直接给图片添加文字的采坑过程</p></blockquote><p>我在freetype绘入文字之前把背景图绘入，会导致生成的图片直接无法打开，导致没法一步到位，所以现在是通过给图片加图片，直接水印的方式做的。<br>这个问题在freetype例子里面找到了解决，它是用到了 <code>golang.org/x/image/math/fixed</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Drawer)</span> <span class="title">DrawString</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">prevC := <span class="keyword">rune</span>(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">if</span> prevC &gt;= <span class="number">0</span> &#123;</span><br><span class="line">d.Dot.X += d.Face.Kern(prevC, c)</span><br><span class="line">&#125;</span><br><span class="line">dr, mask, maskp, advance, ok := d.Face.Glyph(d.Dot, c)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> is falling back on the U+FFFD glyph the responsibility of</span></span><br><span class="line"><span class="comment">// the Drawer or the Face?</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> set prevC = '\ufffd'?</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">draw.DrawMask(d.Dst, dr, d.Src, image.Point&#123;&#125;, mask, maskp, draw.Over)</span><br><span class="line">d.Dot.X += advance</span><br><span class="line">prevC = c</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571534711/blog/watermask/watermark-3-wm-1571395380_pmwbo2.jpg" alt="效果图："></p><p>参考地址如下：<br><a href="https://github.com/golang/freetype/tree/master/example/drawer" target="_blank" rel="noopener">https://github.com/golang/freetype/tree/master/example/drawer</a></p><blockquote><p>批量水印</p></blockquote><p>参考单个水印，构建的 struct 对象新增字段 []string 来接受需要水印的文件地址数组，或者使用文件夹，遍历文件夹下的所有文件统一加水印</p><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><blockquote><p>水印<br><a href="http://www.nljb.net/default/Golang-绘图技术-image-draw-包介绍/" target="_blank" rel="noopener">http://www.nljb.net/default/Golang-绘图技术-image-draw-包介绍/</a><br><a href="https://blog.golang.org/go-imagedraw-package" target="_blank" rel="noopener">https://blog.golang.org/go-imagedraw-package</a><br><a href="https://golang.org/doc/progs/image_draw.go" target="_blank" rel="noopener">https://golang.org/doc/progs/image_draw.go</a><br><a href="https://studygolang.com/articles/12049" target="_blank" rel="noopener">https://studygolang.com/articles/12049</a><br>文字<br><a href="https://github.com/golang/freetype" target="_blank" rel="noopener">https://github.com/golang/freetype</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 水印 </tag>
            
            <tag> image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载总结</title>
      <link href="/%E7%B1%BB%E5%8A%A0%E8%BD%BD/classloader01/"/>
      <url>/%E7%B1%BB%E5%8A%A0%E8%BD%BD/classloader01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文内容暂时基于1.7</p></blockquote><p>在上一篇文章提到一个JVM加载多个boot项目（<a href="https://blog.funnycode.cn/springboot/2019-09-28-springboot-one-jvm/），继续看这块内容涉及到了类加载，springboot内嵌tomcat，spring子容器等，在这篇文章做一个大而不一定全的总结。">https://blog.funnycode.cn/springboot/2019-09-28-springboot-one-jvm/），继续看这块内容涉及到了类加载，springboot内嵌tomcat，spring子容器等，在这篇文章做一个大而不一定全的总结。</a></p><a id="more"></a><h1 id="JVM类加载"><a href="#JVM类加载" class="headerlink" title="JVM类加载"></a>JVM类加载</h1><blockquote><p>类加载机制：虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型</p></blockquote><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571546274/blog/classloader/classonload-3-wm-1571546246_ect8nx.png" alt="类加载生命周期"></p><ul><li>加载</li><li>连接（验证，准备，解析）</li><li>初始化</li><li>使用</li><li>卸载</li></ul><p>如图所示，类加载有7个阶段。其中加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班的执行。而解析阶段不一定，为了支持Java语言的运行时绑定（也称为动态绑定和晚期绑定），它可以在初始化阶段之后再开始。要注意这些阶段通常都是相互交叉地混合式进行的，通常会在一个阶段执行的过程中调用、激活另一个阶段。</p><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><blockquote><p>主要内容参考《深入理解Java虚拟机》</p></blockquote><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><blockquote><p>类加载的第一个阶段</p></blockquote><p>JVM会完成如下3件事情</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li></ul><p>因为没有指定字节流从哪里获取，常见的 <code>.class</code> 文件的加载方式如下：</p><ul><li>从ZIP包中读取，现在主要发展为 JAR 、 WAR ，比如我们最常见的 springboot 的 fat.jar 和 Tomcat 用的 war</li><li>通过网络去获取</li><li>运行时计算生成，这种场景使用的最多的就是动态代理技术， JDK 的动态代理和 cglib</li><li>通过其他文件生成，比如 JSP 应用</li><li>从数据库中读取，很少见</li></ul><p>相对于类加载的其他阶段，一个非数据组类的加载阶段（准确地说，是加载阶段中获取类的二进制字节流的动作）是开发人员可控性最强的，因为加载阶段既可以使用系统提供的引导类加载器来完成，也可以由用户自定义的类加载器去完成，在自定义类加载器中重写一个类加载器的 <code>loadClass()</code> 方法</p><p>对于数组类而言，数组类本身不通过类加载器创建，它是由JVM直接创建的。但是数组类的元素类型最终是要靠类加载器去创建。一个数组类会遵循如下规则：</p><ul><li>如果数组的组件类型是引用类型，那就递归采用上面提到的加载过程去加载这个组件类型，会和这个加载该组件的类加载器关联</li><li>如果数组的组件类型不是引用类型（ int[] )， JVM 会把数组标记为与引导类加载器关联</li><li>数组类的可见性与它的组件类型可见性一致，如果组件类型不是引用类型， 那数组类型的可见性默认为 public </li></ul><blockquote><p>类加载器加载.class文件后，JVM会把.class对应的二进制字节流按虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机自定义，虚拟机规范未规定此区域的具体数据结构。然后在内存中实例化一个 java.lang.Class 类的对象（注意这个也没规定是在Java堆中，对于 HotSpot虚拟机而言，是存放在方法区的）。还有注意加载阶段和连接阶段的部分内容是交叉进行的，只是说这两个阶段的开始时间是保持有序的，加载阶段开始早于连接阶段。</p></blockquote><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证是连接阶段的第一步，这一阶段的目标是确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><blockquote><p>对各种来源的二进制字节流做检查，是虚拟机自我保护的必要操作</p></blockquote><p>验证阶段大致会完成如下4个阶段：</p><ul><li>文件格式验证，验证字节流是否符合Class文件格式的规范。主要保证输入的字节流能正确地解析并存储于方法区内，只有通过这个环节字节流才会进入内存的方法区中进行存储，后面的3个步骤都只会基于方法区的存储结构进行，不会再直接操作字节流。如魔数0xCAFEBASE开头，常量池的常量否是支持类型等</li><li>元数据验证，对字节码描述的信息进行语义分析，保证不存在不符合Java语言规范的元数据信息。如类的父类，不是抽象类的类是否实现接口的所有方法等</li><li>字节码验证，整个验证过程最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。会对类的方法体进行校验分析，保证被校验类在运行时不会危害虚拟机安全</li><li>符号引用验证，这个阶段发生在虚拟机将符号引用转化为直接引用的时候，这个转换动作是在 解析阶段 发生。因此这一步的作用主要就是确保解析动作能正常执行</li></ul><p>验证阶段虽然非常重要的，但是对于JVM而言并不是必要的，可以通过 -Xverify:none 参数来关闭大部分的类验证，缩短虚拟机类加载时间</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法取中进行分配。</p><p>准备阶段的内存分配仅包括类变量（被static修饰的变量）而不包括实例变量，实例变量会在对象实例化的时候随着对象一起分配到 Java 堆中<br>初始化“通常情况”下是数据类型的零值。如 <code>public static int value = 123;</code> value 变量准备阶段过后的初始值是0而不是123，而把 value 设置成 123 的动作将在初始化阶段才会执行。<br>当类字段的字段属性表中存在 ConstantValue 属性，name在准备阶段变量 value 就会被初始化为 ConstantValue 属性所指定的值。如 <code>public static final int value = 123;</code> 编译时 Javac 将会为 value 生成 ConstantValue 属性，在准备阶段虚拟机就会根据 ConstantValue 的设置将 value 赋值为 123</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，通俗的说符号引用就是以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可；直接引用就是直接指向目标的指针、相对偏移量或是一个间接定位到目标的句柄。后者和JVM内存布局有关，前者无关。</p><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。</p><p>类型表如下：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571545479/blog/classloader/classloader-1_wjcibs.png" alt="常量图"></p><p>常量内容可以查看<br><a href="https://www.jianshu.com/p/d8492e748c57" target="_blank" rel="noopener">https://www.jianshu.com/p/d8492e748c57</a></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>类初始化是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码（字节码）</p><p>初始化是执行类构造器 <code>&lt;client&gt;()</code> 方法的过程</p><h4 id="lt-client-gt-和-lt-init-gt"><a href="#lt-client-gt-和-lt-init-gt" class="headerlink" title="&lt;client&gt; 和 &lt;init&gt;"></a><code>&lt;client&gt;</code> 和 <code>&lt;init&gt;</code></h4><h5 id="clinit"><a href="#clinit" class="headerlink" title="clinit"></a>clinit</h5><p>clinit指的是类构造器，这个构造器是jvm自动合并生成的，在jvm第一次加载class文件时调用，包括</p><ul><li>静态变量初始化语句和静态块的执行，它合并static变量的赋值操作，注意是赋值操作，(仅声明，或者final static)不会触发，毕竟前面准备阶段已经默认赋过值为0了</li><li>static{}语句块生成，且虚拟机保证执行前，父类的已经执行完毕，所以说父类如果定义static块的话，一定比子类先执行</li><li>如果一个类或接口中没有static变量的赋值操作和static{}语句块，那么不会被JVM生成</li><li>static变量的赋值操作和static{}语句块合并的顺序是由语句在源文件中出现的顺序所决定的。</li></ul><h5 id="init"><a href="#init" class="headerlink" title="init"></a>init</h5><p>在实例创建出来的时候调用，也就是构造函数，包括:</p><ul><li>new操作符</li><li>普通代码块</li><li>调用Class或java.lang.reflect.Constructor对象的newInstance()方法；</li><li>调用任何现有对象的clone()方法；</li><li>通过java.io.ObjectInputStream类的getObject()方法反序列化</li></ul><p>下面是一个例子，来补充上面的说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogMaoMao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DogMaoMao singleton = <span class="keyword">new</span> DogMaoMao();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> c1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> c2 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DogMaoMao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c1++;</span><br><span class="line">        c2++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DogMaoMao <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"c1 : "</span> + c1 + <span class="string">" -- c2 : "</span> + c2 + <span class="string">" -- age : "</span> + Dog.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DogMaoMao instance = DogMaoMao.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I<span class="string">'m Dog</span></span><br><span class="line"><span class="string">c1 : 1 -- c2 : 10 -- age : 18</span></span><br></pre></td></tr></table></figure><p>分析：</p><ol><li><p>通过main方法入口加载，Run类初始化</p></li><li><p>DogMaoMao.getInstance(); 开始DogMaoMao初始化，准备阶段的时候初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DogMaoMao singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> c1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> c2;</span><br></pre></td></tr></table></figure></li><li><p>DogMaoMao执行到初始化阶段，生成类构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> c1;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 按类里面的位置正向运行</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DogMaoMao singleton = <span class="keyword">new</span> DogMaoMao();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> c2 = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="初始化条件"><a href="#初始化条件" class="headerlink" title="初始化条件"></a>初始化条件</h4><p>Java程序对类的使用方式可以分为两种：</p><ul><li>主动使用：会执行加载、连接、初始化静态域</li><li>被动使用：只执行加载、连接，不执行类的初始化静态域</li></ul><p>JVM严格规定了有且只有5种情况必须立即进行初始化：</p><ul><li>遇到 new 、 getstatic 、 putstatic 或 invokestatic 这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。常见场景：使用new关键字实例化对象的时候、读取或设置一个类的静态字段（被 final 修饰、已在编译器把结果放入常量池的静态字段除外），以及调用一个类的静态方法的时候</li><li>使用 <code>java.lang.reflect</code> 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个类</li><li>当使用 JDK 1.7 的动态语言支持时，如果一个 <code>java.lang.invoke.MethodHanlder</code> 实例最后的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li></ul><p>除去上面的5种场景，所有引用类的方式都不会触发初始化，称为被动引用</p><p>接口的规范和上面类的区别在于第三点，在接口初始化时，并不要求其父接口全部都完成了初始化。</p><h4 id="Class-forName和ClassLoader-loadClass"><a href="#Class-forName和ClassLoader-loadClass" class="headerlink" title="Class.forName和ClassLoader.loadClass"></a>Class.forName和ClassLoader.loadClass</h4><blockquote><p>这里讨论的Class.forName是Class类的方法public static Class&lt;?&gt; forName(String className) throws ClassNotFoundException</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm Dog"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogBaoBao</span> <span class="keyword">extends</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm Dog Bao Bao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Class.forName()会初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbbClassLoader</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">"com.dbb.blog.DogBaoBao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I<span class="string">'m Dog</span></span><br><span class="line"><span class="string">I'</span>m Dog Bao Bao</span><br></pre></td></tr></table></figure><ul><li>ClassLoader.loadClass不会初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbbClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        ClassLoader classLoader = DbbClassLoader.class.getClassLoader();</span><br><span class="line">        Class&lt;?&gt; loadClass = classLoader.loadClass(<span class="string">"com.dbb.blog.DogBaoBao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出内容为空</p><h4 id="常见类加载器说明"><a href="#常见类加载器说明" class="headerlink" title="常见类加载器说明"></a>常见类加载器说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wangwang</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Dog.getClassLoader().loadClass(“Cat”);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CurrentClassLoader，称之为当前类加载器，简称CCL，在代码中对应的就是类型 Dog 的类加载器。<br>SpecificClassLoader，称之为指定类加载器，简称SCL，在代码中对应的是  Dog.class.getClassLoader()，如果使用任意的 ClassLoader 进行加载，这个  ClassLoader 都可以称之为SCL。<br>ThreadContextClassLoader，称之为线程上下文类加载器，简称TCCL，每个线程都会拥有一个 ClassLoader 引用，而且可以通过 Thread.currentThread().setContextClassLoader(ClassLoader classLoader) 进行切换。</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><blockquote><p>类加载器一开始是为了 Java Applet 的需求而开发出来的，虽然这个技术已经 “死掉”，但类加载器在类层次划分、OSGI、热部署、代码加载等领域大放异彩</p></blockquote><p>java语言系统内置了众多类加载器，从一定程度上讲，只存在两种不同的类加载器：一种是启动类加载器，此类加载由C++实现，是JVM的一部分；另一种就是所有其他的类加载器，这些类加载器均由java实现，且全部继承自<code>java.lang.ClassLoader</code></p><ul><li><p>Bootstrap ClassLoader 启动类加载器，最顶层的加载类，由C++实现，负责加载 <java_home>/lib 目录中或 -Xbootclasspath 中参数指定的路径中的，并且是虚拟机识别的（按名称，如rt.jar）类库，所以名字不符合的类库就算放在 lib 目录中也不会被加载）</java_home></p></li><li><p>Extention ClassLoader 扩展类加载器，由启动类加载器加载，实现为<code>sun.misc.Launcher$ExtClassLoader</code>，负责加载目录 <java_home>/lib/ext 目录中或 -Djava.ext.dirs 中参数指定的路径中的 jar 包和 class 文件</java_home></p></li><li><p>Application ClassLoader 应用类加载器，也称为系统类加载器(System ClassLoader，可由<code>java.lang.ClassLoader.getSystemClassLoader()</code>获取)，实现为<code>sun.misc.Launcher$AppClassLoader</code>，由启动类加载器加载，负责加载当前应用 ClassPath 下的所有类，一般应用程序没有自定义自己的类加载器，这个就是程序的默认类加载器。</p></li></ul><blockquote><p>All classes are loaded based on their names and if any of these classes are not found then it returns a NoClassDefFoundError or ClassNotFoundException.</p></blockquote><p>我们一般项目的类加载器结构如下：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571546275/blog/classloader/classloader-2-wm-1571546245_u7hebn.jpg" alt="双亲委派模型"></p><h3 id="类的唯一性"><a href="#类的唯一性" class="headerlink" title="类的唯一性"></a>类的唯一性</h3><p>类全限定名称+加载它的类加载器来确立在 Java 虚拟机中的唯一性，通俗的说就是两个全路径都一样的类，必须要同一个类加载器加载才能比较</p><p>在JVM中，类型被定义在一个叫 SystemDictionary 的数据结构中，该数据结构接受类加载器和全类名作为参数，返回类型实例。</p><p><code>SystemDictionary</code>，系统字典，这个数据结构是保存Java加载类型的数据结构，如下图所示：</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571546275/blog/classloader/classloader-4-wm-1571546246_lzd3c1.png" alt="JVM"></p><h3 id="双亲委派模型（Parents-Delegation-Model）"><a href="#双亲委派模型（Parents-Delegation-Model）" class="headerlink" title="双亲委派模型（Parents Delegation Model）"></a>双亲委派模型（Parents Delegation Model）</h3><blockquote><p>源自JDK 1.2</p></blockquote><blockquote><p>在双亲委派模型中除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。类加载器之间的父子关系一般不会以继承的关系来实现，而都是用组合的关系来复用父加载器</p></blockquote><h3 id="双亲委派如何工作"><a href="#双亲委派如何工作" class="headerlink" title="双亲委派如何工作"></a>双亲委派如何工作</h3><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载</p><h3 id="双亲委派的好处"><a href="#双亲委派的好处" class="headerlink" title="双亲委派的好处"></a>双亲委派的好处</h3><p>Java类随着它的类加载器一起具备了带有优先级的层次关系。比如 <code>java.lang.Object</code>，它存放在 rt.jar 之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器加载，保证了 <code>Object</code> 类在程序的各种类加载器环境中都是同一个类。（你无法通过自定义 <code>java.lang.Object</code> 来覆盖捣乱）</p><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p><code>java.lang.ClassLoader#loadClass(java.lang.String, boolean)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果父加载器不为空，会让父类去加载，否则自己去加载</p><h1 id="自定义Classloader"><a href="#自定义Classloader" class="headerlink" title="自定义Classloader"></a>自定义Classloader</h1><p>编写自定义的Classloader，需要满足以下两点：</p><ul><li>继承java.lang.ClassLoader</li><li>重写父类的findClass方法</li></ul><h2 id="普通的使用"><a href="#普通的使用" class="headerlink" title="普通的使用"></a>普通的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbbClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        String root</span><br><span class="line">            = <span class="string">"/Users/tc/Documents/workspace/github/sample-parent/sample-java-base/java-advance/classloader/target"</span></span><br><span class="line">            + <span class="string">"/classes/com/dbb/blog/"</span>;</span><br><span class="line">        String file = root + name.substring(name.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>) + <span class="string">".class"</span>;</span><br><span class="line">        <span class="keyword">try</span> (InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">             ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream()) &#123;</span><br><span class="line">            <span class="keyword">int</span> buffSize = <span class="number">1024</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[buffSize];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbbClassLoaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DbbClassLoader dbbClassLoader = <span class="keyword">new</span> DbbClassLoader();</span><br><span class="line">        <span class="comment">// Class&lt;?&gt; dogClass = dbbClassLoader.findClass("Dog");</span></span><br><span class="line">        <span class="comment">// error, NoClassFoundError</span></span><br><span class="line">        Class&lt;?&gt; dogClass = dbbClassLoader.findClass(<span class="string">"com.dbb.blog.DogMaoMao"</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; constructor = dogClass.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object o = constructor.newInstance();</span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> DogMaoMao);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>碰到的一些问题</p><h3 id="初始化失败"><a href="#初始化失败" class="headerlink" title="初始化失败"></a>初始化失败</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.InstantiationException</span><br><span class="line">at sun.reflect.InstantiationExceptionConstructorAccessorImpl.newInstance(InstantiationExceptionConstructorAccessorImpl.java:48)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">at java.lang.Class.newInstance(Class.java:442)</span><br><span class="line">at com.dbb.blog.DbbClassLoaderTest.main(DbbClassLoaderTest.java:15)</span><br></pre></td></tr></table></figure><p>类需要有构造函数或者不能是 abstract</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DogMaoMao dogMaoMao = (DogMaoMao)constructor.newInstance();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassCastException: com.dbb.blog.DogMaoMao cannot be cast to com.dbb.blog.DogMaoMao</span><br><span class="line">at com.dbb.blog.DbbClassLoaderTest.main(DbbClassLoaderTest.java:20)</span><br></pre></td></tr></table></figure><h2 id="Fat-jar使用"><a href="#Fat-jar使用" class="headerlink" title="Fat.jar使用"></a>Fat.jar使用</h2><blockquote><p>这里主要讲的是 springboot 的打包方式，因为这种是我们应用中实际用的</p></blockquote><ul><li>URLClassLoader</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class loader is used to load classes and resources from a search</span></span><br><span class="line"><span class="comment"> * path of URLs referring to both JAR files and directories. Any URL that</span></span><br><span class="line"><span class="comment"> * ends with a '/' is assumed to refer to a directory. Otherwise, the URL</span></span><br><span class="line"><span class="comment"> * is assumed to refer to a JAR file which will be opened as needed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The AccessControlContext of the thread that created the instance of</span></span><br><span class="line"><span class="comment"> * URLClassLoader will be used when subsequently loading classes and</span></span><br><span class="line"><span class="comment"> * resources.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The classes that are loaded are by default granted permission only to</span></span><br><span class="line"><span class="comment"> * access the URLs specified when the URLClassLoader was created.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  David Connelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLClassLoader</span> <span class="keyword">extends</span> <span class="title">SecureClassLoader</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加载路径</li></ul><p>源码中提到了可以获取Jar或目录的URLS引用，以 / 结尾，实际项目中我们可以发现路径类似于 XXXX/XXXX/XXXX/X.jar!/</p><p>org.springframework.boot.loader.archive.JarFileArchive#getNestedArchives</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Archive&gt; <span class="title">getNestedArchives</span><span class="params">(EntryFilter filter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">List&lt;Archive&gt; nestedArchives = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Entry entry : <span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (filter.matches(entry)) &#123;</span><br><span class="line">nestedArchives.add(getNestedArchive(entry));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Collections.unmodifiableList(nestedArchives);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际加载的文件路径如下：<br><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571579284/blog/classloader/classloader-8-wm-1571579248_hm22l5.jpg" alt></p><ul><li>资源加载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// org.springframework.boot.loader.jar.JarFile#registerUrlProtocolHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerUrlProtocolHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String handlers = System.getProperty(PROTOCOL_HANDLER, <span class="string">""</span>);</span><br><span class="line">System.setProperty(PROTOCOL_HANDLER,</span><br><span class="line">(<span class="string">""</span>.equals(handlers) ? HANDLERS_PACKAGE : handlers + <span class="string">"|"</span> + HANDLERS_PACKAGE));</span><br><span class="line">resetCachedUrlHandlers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  org.springframework.boot.loader.LaunchedURLClassLoader#definePackage</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">definePackage</span><span class="params">(String className, String packageName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">String packageEntryName = packageName.replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + <span class="string">"/"</span>;</span><br><span class="line">String classEntryName = className.replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + <span class="string">".class"</span>;</span><br><span class="line"><span class="keyword">for</span> (URL url : getURLs()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">URLConnection connection = url.openConnection();</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="comment">// Ignore</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;, AccessController.getContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (java.security.PrivilegedActionException ex) &#123;</span><br><span class="line"><span class="comment">// Ignore</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">java.net.URL#openConnection()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> URLConnection <span class="title">openConnection</span><span class="params">()</span> <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> handler.openConnection(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>URL的openConnection()实际上被委托给了URLStreamHandler处理，针对不同的协议比如jar,file,http,调用不同的hander。</p><ul><li>spring官方</li></ul><p><a href="https://github.com/spring-projects/spring-boot.git" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot.git</a></p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571578510/blog/classloader/classloader-7-wm-1571578473_gdkqlw.jpg" alt="boot项目结构"></p><p>官方的处理逻辑在 spring-boot-loader 模块中</p><blockquote><p>官方 jar file 说明<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-jar-file-structure" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-jar-file-structure</a></p></blockquote><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><blockquote><p>简单的介绍Tomcat中类加载器的设计（主流的Java Web服务器，都实现了自己定义的类加载器）</p></blockquote><p>因为现在主流的微服务开发，我们常常是基于k8s把应用部署在docker里面运行，已经较少的会用到一个Tomcat下放多个war包去运行的情况。所以下面的内容看看就好。</p><p>类加载这一块，Web服务器一般会考虑的几点：</p><ul><li>部署在同一个服务器上的两个Web应用程序所使用的Java类库可以实现相互隔离，应为2个Web程序对同一个类库的依赖的版本不一定一致</li><li>部署在同一个服务器上的两个Web应用程序所使用的Java类库可以共享，类库在使用的时候需要被加载到服务器内存，这样可以重复利用。主要是spring相关的类</li><li>服务器需要尽量不受部署的Web应用程序的影响，服务器依赖的类库会独立</li><li>一些如JSP等文件（变动频率较高）的热替换</li></ul><p>Tomcat5.X的类加载器如下：<br><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571554492/blog/classloader/classloader-5-wm-1571554457_k8w48e.png" alt></p><p>我开始用Tomcat的时候已经是7.X了，我们一般只会看到 /lib 目录，它是上面提到的3个目录的合并， CatalinaClassLoader 和 SharedClassLoader 需要在 tomcat/conf/catalina.properties 配置文件配置 server.loader 和 shared.loader 后才会建立，默认情况下都统一用 CommonClassLoader 代替</p><h1 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h1><h2 id="OSGI"><a href="#OSGI" class="headerlink" title="OSGI"></a>OSGI</h2><blockquote><p>OSGI联盟制定的一个基于Java语言的动态模块化规范</p></blockquote><p>OSGI能实现模块化热部署，它的每个程序模块（成为Bundle）都有一个自己的类加载器，而每个 Bundle 都可以声明它所依赖的 Java Package（Import-Package描述），也可以通过声明它允许导出发布的 Java Package（Export-Package描述）。Bundle之间的依赖从上下层的依赖关系变成了平级模块之间的依赖，变成一个复杂的网状结构。</p><p>OSGI比较复杂，虽然简单的看了查找规则，但是未实际使用过，暂时不做过多描述。</p><h2 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h2><p>Java中所有涉及SPI的加载动作基本上都采用这种方式，如JNDI、JDBC、JAXB等。</p><p>这里拿JDBC驱动举例</p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571578496/blog/classloader/classloader-6-wm-1571578473_occqfm.jpg" alt><br><code>java.sql.Driver</code> 定义在rt.jar中，由JVM自行加载，接口可以由不同的数据库厂商实现，来提供具体数据库的驱动，并且需要按照 SPI 的规范，在 /META-INF/services/ 目录里，创建一个服务接口命名的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Prevent the DriverManager class from being instantiated. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DriverManager</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load the initial JDBC drivers by checking the System property</span></span><br><span class="line"><span class="comment">     * jdbc.properties and then use the &#123;<span class="doctag">@code</span> ServiceLoader&#125; mechanism</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        loadInitialDrivers();</span><br><span class="line">        println(<span class="string">"JDBC DriverManager initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadInitialDrivers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    </span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">                ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class="line">                Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span>(driversIterator.hasNext()) &#123;</span><br><span class="line">                        driversIterator.next();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(Throwable t) &#123;</span><br><span class="line">                <span class="comment">// Do nothing</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>java.util.ServiceLoader#load(java.lang.Class&lt;S&gt;)</code>加载的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoader</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面就是用了线程上下文类加载器，如果你不设置，默认就是AppClassLoader</p><p>这里补充说明一下 spring 加载的时候，资源也是通过线程上下文类加载器加载的，下面的类 <code>DefaultResourceLoader</code> 是资源加载的对象，它里面有一个 classLoader 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title">ResourceLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.classLoader != <span class="keyword">null</span> ? <span class="keyword">this</span>.classLoader : ClassUtils.getDefaultClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtils</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getDefaultClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ClassLoader cl = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// Cannot access thread context ClassLoader - falling back...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cl == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// No thread context class loader -&gt; use class loader of this class.</span></span><br><span class="line">cl = ClassUtils.class.getClassLoader();</span><br><span class="line"><span class="keyword">if</span> (cl == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// getClassLoader() returning null indicates the bootstrap ClassLoader</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cl = ClassLoader.getSystemClassLoader();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// Cannot access system ClassLoader - oh well, maybe the caller can live with null...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 springboot 使用 spring 子容器加载资源的时候，通过设置不同的线程上下文类加载器（加载不同路径的 jar 内容的 自定义类加载器）可以做到隔离</p><p>在springboot整合遇到的问题<br><a href="https://blog.csdn.net/hengyunabc/article/details/79475505" target="_blank" rel="noopener">https://blog.csdn.net/hengyunabc/article/details/79475505</a></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.geeksforgeeks.org/classloader-in-java/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/classloader-in-java/</a><br><a href="https://www.jianshu.com/p/aedee0e14319" target="_blank" rel="noopener">https://www.jianshu.com/p/aedee0e14319</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-jar-file-structure" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-jar-file-structure</a><br><a href="https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg</a><br>《深入理解Java虚拟机》</p>]]></content>
      
      
      <categories>
          
          <category> 类加载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> springboot </tag>
            
            <tag> classloader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个springboot运行在同一个JVM</title>
      <link href="/springboot/springbootOneJvm/"/>
      <url>/springboot/springbootOneJvm/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>当下作为Java开发人员，运行一个服务基本上都会直接基于springboot，因此启动N个服务是需要启动N个springboot程序的。特别在本地环境通过intellij运行多个服务的时候，会需要占用较大的资源，电脑往往会出现卡顿现象。</p></blockquote><a id="more"></a><p>本文主要介绍如何通过启动一个（入口） <code>main</code> 方法来运行多个服务，从而提高本地的开发爽度。</p><h1 id="如何运行"><a href="#如何运行" class="headerlink" title="如何运行"></a>如何运行</h1><blockquote><p>本文例子参考于github的地址，文末有提供</p></blockquote><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><blockquote><p>通过 intellij 创建一个项目，并创建如下module</p></blockquote><ul><li>launcher</li><li>common-service</li><li>first-service</li><li>second-service</li></ul><h3 id="导入必要的依赖"><a href="#导入必要的依赖" class="headerlink" title="导入必要的依赖"></a>导入必要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 会引起一个JMX的问题，下文会说明如何解决 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单个服务说明"><a href="#单个服务说明" class="headerlink" title="单个服务说明"></a>单个服务说明</h3><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571537636/blog/springbootOneJvm/sbojvm-3-wm-1571537594_sucxbc.jpg" alt="服务结构"></p><p>在 first-service 和 second-service 编写最基本的 web 所需要的类 Application 和 Controller</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FirstApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from first microservice!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServiceBackendRunner</span> <span class="keyword">extends</span> <span class="title">BackendRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstServiceBackendRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"first"</span>, FirstApplication.class, CustomizationBean.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果是springboot1.x</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizationBean</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>( <span class="string">"$&#123;backend.apps.first.contextPath&#125;"</span> )</span><br><span class="line">    <span class="keyword">private</span> String contextPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>( <span class="string">"$&#123;backend.apps.first.port&#125;"</span> )</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">        container.setContextPath(contextPath);</span><br><span class="line">        container.setPort(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是springboot2.x</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizationBean</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>( <span class="string">"$&#123;backend.apps.first.contextPath&#125;"</span> )</span><br><span class="line">    <span class="keyword">private</span> String contextPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>( <span class="string">"$&#123;backend.apps.first.port&#125;"</span> )</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">        factory.setContextPath(contextPath);</span><br><span class="line">        factory.setPort(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片中的两个 yml 写下面一个内容即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">FirstService</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8110</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    contextPath:</span> <span class="string">/first</span></span><br></pre></td></tr></table></figure><h3 id="运行核心类"><a href="#运行核心类" class="headerlink" title="运行核心类"></a>运行核心类</h3><blockquote><p>在common模块的核心类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BackendRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区分不通服务的配置</span></span><br><span class="line">    <span class="keyword">private</span> String profile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConfigurableApplicationContext appContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt;[] backendClasses;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object monitor = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> shouldWait;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BackendRunner</span><span class="params">(String profile, <span class="keyword">final</span> Class&lt;?&gt;... backendClasses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.backendClasses = backendClasses;</span><br><span class="line">        <span class="keyword">this</span>.profile = profile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (appContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"AppContext must be null to run this backend"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        runBackendInThread();</span><br><span class="line">        waitUntilBackendIsStarted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">waitUntilBackendIsStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shouldWait) &#123;</span><br><span class="line">                    monitor.wait();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runBackendInThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread runnerThread = <span class="keyword">new</span> BackendRunnerThread();</span><br><span class="line">        shouldWait = <span class="keyword">true</span>;</span><br><span class="line">        runnerThread.setContextClassLoader(backendClasses[<span class="number">0</span>].getClassLoader());</span><br><span class="line">        runnerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringApplication.exit(appContext);</span><br><span class="line">        appContext = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BackendRunnerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 真正启动</span></span><br><span class="line">            <span class="comment">// 设置环境，加载不同配置</span></span><br><span class="line">            System.setProperty(<span class="string">"spring.profiles.active"</span>, profile);</span><br><span class="line">            appContext = SpringApplication.run(backendClasses, <span class="keyword">new</span> String[] &#123;&#125;);</span><br><span class="line">            <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">                shouldWait = <span class="keyword">false</span>;</span><br><span class="line">                monitor.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动核心类"><a href="#启动核心类" class="headerlink" title="启动核心类"></a>启动核心类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroservicesStarter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Backend&gt; activeBackends = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MicroservicesStarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startBackends</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        startBackend(<span class="string">"first-software"</span>, <span class="string">"com.gongdao.middleware.first.backendRunner.FirstServiceBackendRunner"</span>);</span><br><span class="line">        startBackend(<span class="string">"second-software"</span>, <span class="string">"com.gongdao.middleware.second.backendRunner.SecondServiceBackendRunner"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动入口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> backendProjectName 项目名称，对应文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> backendClassName   每个服务的启动类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startBackend</span><span class="params">(<span class="keyword">final</span> String backendProjectName, <span class="keyword">final</span> String backendClassName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL runnerUrl = <span class="keyword">new</span> File(</span><br><span class="line">            System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/"</span> + backendProjectName + <span class="string">"/target/classes/"</span>).toURI()</span><br><span class="line">            .toURL();</span><br><span class="line"></span><br><span class="line">        URL[] urls = <span class="keyword">new</span> URL[] &#123;runnerUrl&#125;;</span><br><span class="line"></span><br><span class="line">        URLClassLoader cl = <span class="keyword">new</span> URLClassLoader(urls, MicroservicesStarter.class.getClassLoader());</span><br><span class="line">        Class&lt;?&gt; runnerClass = cl.loadClass(backendClassName);</span><br><span class="line"></span><br><span class="line">        Object runnerInstance = runnerClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Backend backend = <span class="keyword">new</span> Backend(runnerClass, runnerInstance);</span><br><span class="line">        activeBackends.add(backend);</span><br><span class="line"></span><br><span class="line">        runnerClass.getMethod(<span class="string">"run"</span>).invoke(runnerInstance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stopAllBackends</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Backend b : activeBackends) &#123;</span><br><span class="line">            b.runnerClass.getMethod(<span class="string">"stop"</span>).invoke(b.runnerInstance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Backend</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Class&lt;?&gt; runnerClass;</span><br><span class="line">        <span class="keyword">private</span> Object runnerInstance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Backend</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; runnerClass, <span class="keyword">final</span> Object runnerInstance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.runnerClass = runnerClass;</span><br><span class="line">            <span class="keyword">this</span>.runnerInstance = runnerInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><blockquote><p>点击 com.gongdao.middleware.LauncherApplication#main 启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LauncherApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MicroservicesStarter.startBackends();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571537636/blog/springbootOneJvm/sbojvm-1-wm-1571537591_ndonnh.jpg" alt="first"></p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571537636/blog/springbootOneJvm/sbojvm-2-wm-1571537593_t4avao.jpg" alt="second"></p><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用了不同的classloader（默认类+指定的路径的class文件）去加载不同的服务</p><h2 id="actuate包的JMX注册异常"><a href="#actuate包的JMX注册异常" class="headerlink" title="actuate包的JMX注册异常"></a>actuate包的JMX注册异常</h2><blockquote><p>在 springboot1.x 的时候出现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">2019-09-27 15:13:11.343 ERROR 51322 --- [       Thread-5] o.s.b.a.e.jmx.EndpointMBeanExporter      : Could not register JmxEndpoint [auditEventsEndpoint]</span><br><span class="line"></span><br><span class="line">org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [org.springframework.boot.actuate.endpoint.jmx.AuditEventsJmxEndpoint@65a39e41] with key &apos;auditEventsEndpoint&apos;; nested exception is javax.management.InstanceAlreadyExistsException: org.springframework.boot:type=Endpoint,name=auditEventsEndpoint</span><br><span class="line">at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:628) ~[spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.registerJmxEndpoints(EndpointMBeanExporter.java:174) [spring-boot-actuator-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.locateAndRegisterEndpoints(EndpointMBeanExporter.java:162) [spring-boot-actuator-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.doStart(EndpointMBeanExporter.java:158) [spring-boot-actuator-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.start(EndpointMBeanExporter.java:337) [spring-boot-actuator-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:50) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:350) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:880) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:146) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:124) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at com.gongdao.middleware.common.BackendRunner$BackendRunnerThread.run(BackendRunner.java:58) [classes/:na]</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>通过引入 profile 让每个服务调用自己的配置文件，通过配置如下内容解决：</p><p>需要在 launcher 的resource下添加对应的 yml 文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jmx:</span></span><br><span class="line"><span class="attr">    default-domain:</span> <span class="string">FirstService</span></span><br><span class="line"></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line"><span class="attr">  jmx:</span></span><br><span class="line"><span class="attr">    unique-names:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    domain:</span> <span class="string">FirstService</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/rameez4ever/springboot-demo/tree/master/springboot-multi-service-launcher" target="_blank" rel="noopener">https://github.com/rameez4ever/springboot-demo/tree/master/springboot-multi-service-launcher</a><br><a href="https://www.davidtanzer.net/david&#39;s%20blog/2015/04/01/running-multiple-spring-boot-apps-in-the-same-jvm.html" target="_blank" rel="noopener">https://www.davidtanzer.net/david&#39;s%20blog/2015/04/01/running-multiple-spring-boot-apps-in-the-same-jvm.html</a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> springboot </tag>
            
            <tag> classloader </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty权威指南-客户端创建</title>
      <link href="/netty/netty-qwzn-client/"/>
      <url>/netty/netty-qwzn-client/</url>
      
        <content type="html"><![CDATA[<p>步骤1 用户线程创建 Bootstrap 实例，通过 API 设置创建客户端相关的参数，异步发起客户端连接<br>步骤2 创建处理客户端连接、 I/O 读写的 Reactor 线程组 NioEventLoopGroup 。可以通过构造函数指定 I/O 线程的个数，默认为 CPU 内核数的2倍</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@link</span> EventLoopGroup&#125; which is used to handle all the events for the to-be-created</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Channel&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">group</span><span class="params">(EventLoopGroup group)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"group"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.group != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"group set already"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.group = group;</span><br><span class="line">    <span class="keyword">return</span> self();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allow to specify a &#123;<span class="doctag">@link</span> ChannelOption&#125; which is used for the &#123;<span class="doctag">@link</span> Channel&#125; instances once they got</span></span><br><span class="line"><span class="comment"> * created. Use a value of &#123;<span class="doctag">@code</span> null&#125; to remove a previous set &#123;<span class="doctag">@link</span> ChannelOption&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">B <span class="title">option</span><span class="params">(ChannelOption&lt;T&gt; option, T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (option == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"option"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (options) &#123;</span><br><span class="line">            options.remove(option);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (options) &#123;</span><br><span class="line">            options.put(option, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> self();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤3 通过 Bootstrap 的 ChannelFactory 和用户指定的 Channel 类型创建用于客户端连接的 NioSocketChannel ，它的功能类似于JDK NIO类库提供的 SocketChannel<br>步骤4 创建默认的 Channel Handler Piepline，用于调度和执行网络事件<br>步骤5 异步发起 TCP 连接，判断连接是否成功。如果成功，则直接将 NioSocketChannel 注册到多路复用器上，监听读操作位，用于数据报读取和消息发送；<br>如果没有立即连接成功，则注册连接监听位到多路复用器，等待连接结果<br>步骤6 注册对应到网络监听状态位到多路复用器<br>步骤7 由多路复用器在 I/O 现场中轮询各 Channel，处理连接结果<br>步骤8 如果连接成功，设置 Future 结果，发送连接成功事件，触发 ChannelPipeline 执行<br>步骤9 由 ChannelPipeline 调度执行系统和用户到 ChannelHandler，执行业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> port, <span class="keyword">final</span> String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    EventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Bootstrap b = <span class="keyword">new</span> Bootstrap(); <span class="comment">// 1</span></span><br><span class="line">        b.group(worker) <span class="comment">// 2</span></span><br><span class="line">            .channel(NioSocketChannel.class)</span><br><span class="line">            .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">            .handler(<span class="keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                    handlerAdapterMap.entrySet().stream()</span><br><span class="line">                        .forEach(handlerAdapter -&gt; ch.pipeline()</span><br><span class="line">                            .addLast(handlerAdapter.getKey(), handlerAdapter.getValue()));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        ChannelFuture channelFuture = b.connect(host, port);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            channelFuture.channel().writeAndFlush(<span class="string">"filter result"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        worker.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netty </tag>
            
            <tag> 原创 </tag>
            
            <tag> netty客户端 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务采坑记录01</title>
      <link href="/spring/transaction-action-01/"/>
      <url>/spring/transaction-action-01/</url>
      
        <content type="html"><![CDATA[<h1 id="故事原由"><a href="#故事原由" class="headerlink" title="故事原由"></a>故事原由</h1><p>最近有个同事在使用开放平台透出去自己方法的时候，开放平台返回出来了异常。一开始问我的时候，因为用到了RPC的泛化调用，我和他还扯了一会的泛化的异常处理逻辑。等忙完自己的事情后，我仔细查跟他的代码走了下，发现事务有嵌套关系，突然我就意识到了事务的一个常识，在这里记录下。 </p><a id="more"></a><h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BService bService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AService aService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">            result = bService.<span class="keyword">do</span>();</span><br><span class="line">            aService.<span class="keyword">do</span>();</span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑惑的点在于我都  <code>try...catch</code>  住了，为何还会出现异常？这个问题通过阅读事务的源码可以让人豁然开朗。</p><h1 id="复现问题的Demo"><a href="#复现问题的Demo" class="headerlink" title="复现问题的Demo"></a>复现问题的Demo</h1><p>定义一个3个Service类，AService、BService、CService，在controller调用CService的方法execute，然后CService里面对数据库做一次更新，再调用BService和AService的方法，其中某个方法里面发生异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CService cService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"transaction-demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">result</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cService.execute(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CServiceImpl</span> <span class="keyword">implements</span> <span class="title">CService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DruidDemoMapper druidDemoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BService bService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AService aService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DruidDemo druidDemo = <span class="keyword">new</span> DruidDemo();</span><br><span class="line">            druidDemo.setId(<span class="number">401L</span>);</span><br><span class="line">            druidDemo.setName(<span class="string">"tie"</span>);</span><br><span class="line">            druidDemo.setAge(<span class="number">18</span>);</span><br><span class="line">            druidDemoMapper.updateByPrimaryKey(druidDemo);</span><br><span class="line">            result = aService.execute(value);</span><br><span class="line">            result = bService.executeError(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServiceImpl</span> <span class="keyword">implements</span> <span class="title">AService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServiceImpl</span> <span class="keyword">implements</span> <span class="title">BService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">executeError</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="核心源码说明"><a href="#核心源码说明" class="headerlink" title="核心源码说明"></a>核心源码说明</h1><p>前置说明</p><ul><li>@Service等注解，意味着会产生一个代理类（目前的版本基于cglib）</li><li>只分析本次问题的核心代码（补充一次完整的事务调用流程）</li><li>事务管理器会单独剖析</li></ul><h2 id="status对象"><a href="#status对象" class="headerlink" title="status对象"></a>status对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultTransactionStatus</span> <span class="keyword">extends</span> <span class="title">AbstractTransactionStatus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// self</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> newTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> newSynchronization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> readOnly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> debug;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object suspendedResources;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AbstractTransactionStatus</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> rollbackOnly = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> completed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object savepoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际运行时如下：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/327432/1569381660979-c364f0c7-4a84-46e8-bbd7-2d4d81207f52.png" alt="DefaultTransactionStatus"></p><h2 id="一个状态的设置"><a href="#一个状态的设置" class="headerlink" title="一个状态的设置"></a>一个状态的设置</h2><h3 id="rollbackOnly"><a href="#rollbackOnly" class="headerlink" title="rollbackOnly"></a>rollbackOnly</h3><ul><li>org.springframework.transaction.support.DefaultTransactionStatus#isGlobalRollbackOnly</li><li>org.springframework.transaction.support.ResourceHolderSupport#isRollbackOnly</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceHolderSupport</span> <span class="keyword">implements</span> <span class="title">ResourceHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> synchronizedWithTransaction = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> rollbackOnly = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.rollbackOnly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置的地方"><a href="#设置的地方" class="headerlink" title="设置的地方"></a>设置的地方</h3><ul><li>org.springframework.transaction.support.AbstractPlatformTransactionManager#processRollback</li><li>org.springframework.transaction.support.AbstractPlatformTransactionManager#doSetRollbackOnly</li><li>org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject#setRollbackOnly</li><li>org.springframework.transaction.support.ResourceHolderSupport#setRollbackOnly</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processRollback</span><span class="params">(DefaultTransactionStatus status, <span class="keyword">boolean</span> unexpected)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> unexpectedRollback = unexpected; <span class="comment">// 回滚进来的时候是 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line">                    <span class="comment">// 这个在内嵌事务的时候有一种使用场景</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Participating in larger transaction</span></span><br><span class="line"><span class="keyword">if</span> (status.hasTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Participating transaction failed - marking existing transaction as rollback-only"</span>);</span><br><span class="line">&#125;</span><br><span class="line">doSetRollbackOnly(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.debug(<span class="string">"Should roll back transaction but cannot - no transaction available"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unexpected rollback only matters here if we're asked to fail early</span></span><br><span class="line"><span class="keyword">if</span> (!isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">unexpectedRollback = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终事务回滚会走到这里，抛出这个异常</span></span><br><span class="line"><span class="keyword">if</span> (unexpectedRollback) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line"><span class="string">"Transaction rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>21行 进入回滚逻辑，会设置rollbackOnly=true</li></ul><h2 id="异常触发的地方"><a href="#异常触发的地方" class="headerlink" title="异常触发的地方"></a>异常触发的地方</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (status.isCompleted()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line"><span class="string">"Transaction is already completed - do not call commit or rollback more than once per transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Transactional code has requested rollback"</span>);</span><br><span class="line">&#125;</span><br><span class="line">processRollback(defStatus, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Global transaction is marked as rollback-only but transactional code requested commit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">processRollback(defStatus, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processCommit(defStatus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>16行 shouldCommitOnGlobalRollbackOnly 一直是false，所以第一个条件是true，所以只要第二个条件满足就会进入processRollback<br>这个地方比较骚气的地方是，commit里面会走真正的rollback逻辑，<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGlobalRollbackOnly</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">this</span>.transaction <span class="keyword">instanceof</span> SmartTransactionObject) &amp;&amp;</span><br><span class="line">((SmartTransactionObject) <span class="keyword">this</span>.transaction).isRollbackOnly());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>结合上面的DefaultTransactionStatus对象可以清楚的看到属性变化</p><h2 id="调用链路"><a href="#调用链路" class="headerlink" title="调用链路"></a>调用链路</h2><p>一些细节不在本文展开</p><blockquote><p>逻辑起始<br>controller中调用 <code>com.funnycode.dashboard.service.CService#execute</code></p></blockquote><blockquote><p>核心代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//We start with an index of -1 and increment early.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object interceptorOrInterceptionAdvice =</span><br><span class="line"><span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="keyword">this</span>.currentInterceptorIndex);</span><br><span class="line"><span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line"><span class="comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line"><span class="comment">// been evaluated and found to match.</span></span><br><span class="line">InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line">Class&lt;?&gt; targetClass = (<span class="keyword">this</span>.targetClass != <span class="keyword">null</span> ? <span class="keyword">this</span>.targetClass : <span class="keyword">this</span>.method.getDeclaringClass());</span><br><span class="line"><span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, targetClass, <span class="keyword">this</span>.arguments)) &#123;</span><br><span class="line"><span class="keyword">return</span> dm.interceptor.invoke(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Dynamic matching failed.</span></span><br><span class="line"><span class="comment">// Skip this interceptor and invoke the next in the chain.</span></span><br><span class="line"><span class="keyword">return</span> proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// It's an interceptor, so we just invoke it: The pointcut will have</span></span><br><span class="line"><span class="comment">// been evaluated statically before this object was constructed.</span></span><br><span class="line"><span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进入cglib</p><ul><li>org.sporg.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor#intercept 这里会获取到事务切面<ul><li>org.springframework.aop.framework.ReflectiveMethodInvocation#proceed 21行 继续调用自己方法 proceed()<ul><li>org.springframework.transaction.interceptor.TransactionInterceptor#invoke 27行 再次进来会走Interceptor<ul><li>org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction<ul><li>org.springframework.transaction.interceptor.TransactionAspectSupport.InvocationCallback#proceedWithInvocation</li><li>org.springframework.aop.framework.ReflectiveMethodInvocation#proceed<ul><li>org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation#invokeJoinpoint<ul><li>org.springframework.cglib.proxy.MethodProxy#invoke<ul><li>org.springframework.cglib.reflect.FastClass#invoke(int, java.lang.Object, java.lang.Object[])</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></blockquote><blockquote><p>执行<br>进入<code>com.funnycode.dashboard.service.CService#execute</code>真正执行代码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 记录 </tag>
            
            <tag> transaction </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云RDS采坑记录01</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/aliyun-rds-error-01/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/aliyun-rds-error-01/</url>
      
        <content type="html"><![CDATA[<h1 id="故事原由"><a href="#故事原由" class="headerlink" title="故事原由"></a>故事原由</h1><p>上周同事负责的同步服务出现宕机后，由于在忙于另一个重要的项目，线上没有及时处理，后发现同步数据丢失。我趁机了解了下我们的同步逻辑并对这次异常做一个简单的总结。</p><a id="more"></a><h1 id="异常描述"><a href="#异常描述" class="headerlink" title="异常描述"></a>异常描述</h1><p>线上我们基于otter的msyql数据同步服务出错，出错后会停止数据同步（我们后续的配置没有从中心节点同步到私有云节点），导致了私有云无法正常启动部分服务。</p><h1 id="发生背景"><a href="#发生背景" class="headerlink" title="发生背景"></a>发生背景</h1><ul><li>我们分阿里云（中心节点），北京私有云节点，广州私有云节点等，数据会从中心节点同步到私有云节点</li><li>中心节点使用了阿里云的RDS MySQL数据库，私有云节点采用自己搭建的MySQL</li><li>采用基于otter的数据同步服务（otter基于canal）</li><li>我们采用了xxl-job来做定时调度，因为之前认为它只有DML操作，我们的同步服务没有对它的DDL操作做处理</li><li>xxl-job的机器配置的较低，数据量变大之后XXL_JOB_QRTZ_TRIGGER_LOG的查询语句运行较慢，我们给它增加了个索引</li><li>我们的同步服务异常后，会停止数据同步</li><li>A服务发布，在中心节点加了配置，私有云节点启动失败</li><li>查询发现同步服务异常，无法通过binlog的偏移量找到记录，导致无法把中心节点加了的配置同步到私有云节点</li><li>我们是在一天后对这个问题做的处理</li></ul><blockquote><p>xxl-job的SQL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.id, t.job_group, t.job_id, t.executor_address, t.executor_handler</span><br><span class="line">  , t.executor_param, t.executor_sharding_param, t.executor_fail_retry_count, t.trigger_time, t.trigger_code</span><br><span class="line">  , t.trigger_msg, t.handle_time, t.handle_code, t.handle_msg</span><br><span class="line"><span class="keyword">FROM</span> XXL_JOB_QRTZ_TRIGGER_LOG t</span><br><span class="line"><span class="keyword">WHERE</span> t.job_group = ?</span><br><span class="line">  <span class="keyword">AND</span> t.job_id = ?</span><br><span class="line">  <span class="keyword">AND</span> t.trigger_time &gt;= ?</span><br><span class="line">  <span class="keyword">AND</span> t.trigger_time &lt;= ?</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> ?, ?</span><br></pre></td></tr></table></figure><blockquote><p>mysql查看binlog</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 查看binlog文件列表</span><br><span class="line">mysql&gt; show binary logs;</span><br><span class="line">+<span class="comment">------------------+-----------+</span></span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+<span class="comment">------------------+-----------+</span></span><br><span class="line">| mysql-bin.000001 |    107853 |</span><br><span class="line">+<span class="comment">------------------+-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 查看<span class="keyword">binlog</span>状态</span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| mysql-bin.000001 |   107853 |              |                  |                   |</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="解决对策"><a href="#解决对策" class="headerlink" title="解决对策"></a>解决对策</h1><p>因为同步服务是由于binlog的偏移量问题而失败，偏移量是通过zk节点去获取的，我们去MySQL查询了最新的可用的偏移量，设置到了zk的指定节点，让同步服务正常运行。（我们的配置同步在新偏移量之后，所以启动后能够从中心节点同步到私有云节点）</p><p>这个是临时的解决方案，我们没法找到之前的binlog的完整记录</p><h1 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h1><h2 id="为什么过了一天，同步服务会启动失败？"><a href="#为什么过了一天，同步服务会启动失败？" class="headerlink" title="为什么过了一天，同步服务会启动失败？"></a>为什么过了一天，同步服务会启动失败？</h2><p>同步服务失败，因为binlog找不到。MySQL我们自己安装的话binlog配置默认是不清理的，但是RDS上不是这样的。<br>下面是RDS默认配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 保留时长：默认值为18，表示实例空间内默认保存最近18个小时内的Binlog文件，18个小时之前的日志将在备份后（需要开启日志备份）清理。保留时长可选范围值为0~7*24小时。</span><br><span class="line">- 空间使用率不超过：默认值为30%，表示本地Binlog空间使用率大于30%时，系统会从最早的Binlog开始清理，直到空间使用率低于30%。空间使用率不超过可选范围值为0 - 50% 。</span><br><span class="line">- 可用空间保护，默认开启该功能，表示当实例总空间使用率超过80%或实例剩余可用空间不足5GB时，会强制从最早的Binlog开始清理，直到总空间使用率降到80%以下且实例剩余可用空间大于5GB。</span><br></pre></td></tr></table></figure><p>我们可以看到RDS默认保留时间小于一天，所以我们停了一天后再度开启，导致binlog位置找不到，只能从最新的偏移量同步。这里首先把保留时长调至3天（我们的同步服务不可能停3天，在某些改造项目，同步服务可能会停1-2天），这个需要根据实际场景去设置合理的值。</p><h2 id="binlog不在了，如何补救？"><a href="#binlog不在了，如何补救？" class="headerlink" title="binlog不在了，如何补救？"></a>binlog不在了，如何补救？</h2><p>阿里云会把binlog保存到OSS，从OSS下载回来binlog，然后把binlog设置到MySQL指定位置。这块有任何问题可以提工单，毕竟顾客是“上帝”</p><p>本机位置是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据同步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> otter </tag>
            
            <tag> canal </tag>
            
            <tag> mysql </tag>
            
            <tag> binlog </tag>
            
            <tag> 阿里云RDS </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
