<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DogBaoBao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.funnycode.cn/"/>
  <updated>2019-10-20T02:17:59.825Z</updated>
  <id>https://blog.funnycode.cn/</id>
  
  <author>
    <name>包包</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图片添加水印</title>
    <link href="https://blog.funnycode.cn/go/watermark01/"/>
    <id>https://blog.funnycode.cn/go/watermark01/</id>
    <published>2019-10-16T08:07:54.000Z</published>
    <updated>2019-10-20T02:17:59.825Z</updated>
    
    <content type="html"><![CDATA[<p>既然开始写博客，就需要给图片加水印，之前用Java写过一个已经找不到影踪，只记得Java写的还比较麻烦。最近又在重温go的内容，就顺便用go写了下图片加水印的代码。</p><h1 id="输出文字图片"><a href="#输出文字图片" class="headerlink" title="输出文字图片"></a>输出文字图片</h1><h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571535791/blog/watermask/wattermark-1-wm-1571388899_hojx8n.png" alt="效果图："></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>依赖 <code>github.com/golang/freetype</code> 仓库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> WaterMark <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// freetype的参数</span></span><br><span class="line">width    <span class="keyword">int</span>     <span class="comment">// 图片的大小 宽度</span></span><br><span class="line">height   <span class="keyword">int</span>     <span class="comment">// 图片的大小 高度</span></span><br><span class="line">fontSize <span class="keyword">float64</span> <span class="comment">// 字体尺寸</span></span><br><span class="line">fontDPI  <span class="keyword">float64</span> <span class="comment">//   屏幕每英寸的分辨率</span></span><br><span class="line">fontFile <span class="keyword">string</span>  <span class="comment">// 需要使用的字体文件</span></span><br><span class="line"></span><br><span class="line">srcPath <span class="keyword">string</span> <span class="comment">// 原文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wm *WaterMark)</span> <span class="title">CreateStringPic</span><span class="params">(srcPath, content <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 新建一个 指定大小的RGBA位图</span></span><br><span class="line">img := image.NewNRGBA(image.Rect(<span class="number">0</span>, <span class="number">0</span>, wm.width, wm.height))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画背景</span></span><br><span class="line"><span class="comment">//for y := 0; y &lt; wm.height; y++ &#123;</span></span><br><span class="line"><span class="comment">//for x := 0; x &lt; wm.width; x++ &#123;</span></span><br><span class="line"><span class="comment">//// 设置某个点的颜色，依次是 RGBA，变化的</span></span><br><span class="line"><span class="comment">//img.Set(x, y, color.RGBA&#123;255, 255, 255, 255&#125;)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读字体数据</span></span><br><span class="line">fontBytes, err := ioutil.ReadFile(wm.fontFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">font, err := freetype.ParseFont(fontBytes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := freetype.NewContext()</span><br><span class="line">c.SetDPI(wm.fontDPI)</span><br><span class="line">c.SetFont(font)</span><br><span class="line">c.SetFontSize(wm.fontSize)</span><br><span class="line">c.SetClip(img.Bounds())</span><br><span class="line">c.SetDst(img)</span><br><span class="line">c.SetSrc(image.Black)</span><br><span class="line"></span><br><span class="line">pt := freetype.Pt(<span class="number">15</span>, <span class="number">30</span>+<span class="keyword">int</span>(c.PointToFixed(wm.fontSize)&gt;&gt;<span class="number">8</span>)) <span class="comment">// 字出现的位置</span></span><br><span class="line"></span><br><span class="line">_, err = c.DrawString(content, pt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create(makePath(srcPath), img)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子的文字图片输出是我的博客地址，你可以替换成自己想要的内容。</p><p>这个例子用到了 freetype 包</p><p>官方字体格式的说明如下：</p><blockquote><p>Drawing Font Glyphs<br>To draw a font glyph in blue starting from a point p, draw with an image.ColorImage source and an image.Alpha mask. For simplicity, we aren’t performing any sub-pixel positioning or rendering, or correcting for a font’s height above a baseline.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">DrawString</span><span class="params">(s <span class="keyword">string</span>, p fixed.Point26_6)</span> <span class="params">(fixed.Point26_6, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">for</span> _, <span class="keyword">rune</span> := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">advanceWidth, mask, offset, err := c.glyph(index, p) <span class="comment">// 最后会进入下个方法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fixed.Point26_6&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">p.X += advanceWidth</span><br><span class="line">glyphRect := mask.Bounds().Add(offset)</span><br><span class="line">dr := c.clip.Intersect(glyphRect)</span><br><span class="line"><span class="keyword">if</span> !dr.Empty() &#123;</span><br><span class="line">mp := image.Point&#123;<span class="number">0</span>, dr.Min.Y - glyphRect.Min.Y&#125;</span><br><span class="line">draw.DrawMask(c.dst, dr, c.src, image.ZP, mask, mp, draw.Over)</span><br><span class="line">&#125;</span><br><span class="line">prev, hasPrev = index, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">rasterize</span><span class="params">(glyph truetype.Index, fx, fy fixed.Int26_6)</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">fixed.Int26_6, *image.Alpha, image.Point, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">a := image.NewAlpha(image.Rect(<span class="number">0</span>, <span class="number">0</span>, xmax-xmin, ymax-ymin))</span><br><span class="line">c.r.Rasterize(raster.NewAlphaSrcPainter(a))</span><br><span class="line"><span class="keyword">return</span> c.glyphBuf.AdvanceWidth, a, image.Point&#123;xmin, ymin&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看源码后会发现用到的是 <code>image.NewAlpha</code> 和 <code>draw.DrawMask()</code>，这块内容会在结尾有网址查看</p><h1 id="输出图片水印"><a href="#输出图片水印" class="headerlink" title="输出图片水印"></a>输出图片水印</h1><h2 id="原图："><a href="#原图：" class="headerlink" title="原图："></a>原图：</h2><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571535804/blog/watermask/watermark-2_yyj8ak.jpg" alt="原图"></p><h2 id="效果图：-1"><a href="#效果图：-1" class="headerlink" title="效果图："></a>效果图：</h2><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571535802/blog/watermask/watermark-2-wm-1571391482_kudhos.jpg" alt="效果图："></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wm *WaterMark)</span> <span class="title">AddImage</span><span class="params">(wmPath <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">srcImg := getImage(wm.srcPath)</span><br><span class="line"></span><br><span class="line">b := srcImg.Bounds()</span><br><span class="line"></span><br><span class="line">dst := image.NewNRGBA(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘入原始图片</span></span><br><span class="line">draw.Draw(dst, b, srcImg, image.ZP, draw.Src)</span><br><span class="line"></span><br><span class="line">waterMark := getImage(wmPath)</span><br><span class="line"></span><br><span class="line">maxW := b.Max.X / <span class="number">5</span></span><br><span class="line">maxH := b.Max.Y / <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 会出现多个水印，offset位置信息</span></span><br><span class="line"><span class="keyword">for</span> offsetWidth := <span class="number">0</span>; offsetWidth &lt; b.Max.X; offsetWidth += maxW &#123;</span><br><span class="line"><span class="keyword">for</span> offsetHeight := <span class="number">0</span>; offsetHeight &lt; b.Max.X; offsetHeight += maxH &#123;</span><br><span class="line">offset := image.Pt(offsetWidth, offsetHeight)</span><br><span class="line">draw.Draw(dst, waterMark.Bounds().Add(offset), waterMark, image.ZP, draw.Over)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 固定位置</span></span><br><span class="line"><span class="comment">// offset := image.Pt((b.Bounds().Max.X-waterMark.Bounds().Max.X)/2, (b.Bounds().Max.Y-waterMark.Bounds().Max.Y)/2)</span></span><br><span class="line"><span class="comment">// draw.Draw(dst, waterMark.Bounds().Add(offset), waterMark, image.ZP, draw.Over)</span></span><br><span class="line"></span><br><span class="line">create(makePath(wm.srcPath), dst)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片加水印用到的是 draw 包的内容，相对比较简单，只需要修改中间那部分 <code>image.Pt()</code> 和 <code>draw.Draw()</code> 就可以调整位置</p><h1 id="缩放图片"><a href="#缩放图片" class="headerlink" title="缩放图片"></a>缩放图片</h1><p>缩放图片参考的是 <code>github.com/nfnt/resize</code> 包，比较简单，这里就不上效果了。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wm *WaterMark)</span> <span class="title">Resize</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">src := getImage(wm.srcPath)</span><br><span class="line"></span><br><span class="line">b := src.Bounds()</span><br><span class="line">width := b.Max.X</span><br><span class="line">height := b.Max.Y</span><br><span class="line"></span><br><span class="line">w, h := calculateRatioFit(width, height)</span><br><span class="line"><span class="comment">// 调用resize库进行图片缩放</span></span><br><span class="line">dst := resize.Resize(<span class="keyword">uint</span>(w), <span class="keyword">uint</span>(h), src, resize.Lanczos3)</span><br><span class="line"></span><br><span class="line">create(makePath(wm.srcPath), dst)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="补充代码"><a href="#补充代码" class="headerlink" title="补充代码"></a>补充代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getImage</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(image.Image)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 水印图片</span></span><br><span class="line">f, err := os.Open(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"打开水印图片异常"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">suffix := path.Ext(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> img image.Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> suffix &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".jpeg"</span>, <span class="string">".jpg"</span>:</span><br><span class="line">fmt.Println(<span class="string">"这是JPG文件"</span>)</span><br><span class="line">img, err = jpeg.Decode(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"解码jpeg图片异常"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">".png"</span>:</span><br><span class="line">fmt.Println(<span class="string">"这是PNG文件"</span>)</span><br><span class="line">img, err = png.Decode(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"解码jpeg图片异常"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(target <span class="keyword">string</span>, m image.Image)</span></span> &#123;</span><br><span class="line">imgNew, err := os.Create(target)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> imgNew.Close()</span><br><span class="line"></span><br><span class="line">suffix := path.Ext(target)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> suffix &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".jpeg"</span>, <span class="string">".jpg"</span>:</span><br><span class="line">err = jpeg.Encode(imgNew, m, &amp;jpeg.Options&#123;<span class="number">100</span>&#125;)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">".png"</span>:</span><br><span class="line">err = png.Encode(imgNew, m)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展-amp-问题"><a href="#扩展-amp-问题" class="headerlink" title="扩展&amp;问题"></a>扩展&amp;问题</h2><blockquote><p>直接给图片添加文字的采坑过程</p></blockquote><p>我在freetype绘入文字之前把背景图绘入，会导致生成的图片直接无法打开，导致没法一步到位，所以现在是通过给图片加图片，直接水印的方式做的。<br>这个问题在freetype例子里面找到了解决，它是用到了 <code>golang.org/x/image/math/fixed</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Drawer)</span> <span class="title">DrawString</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">prevC := <span class="keyword">rune</span>(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">if</span> prevC &gt;= <span class="number">0</span> &#123;</span><br><span class="line">d.Dot.X += d.Face.Kern(prevC, c)</span><br><span class="line">&#125;</span><br><span class="line">dr, mask, maskp, advance, ok := d.Face.Glyph(d.Dot, c)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> is falling back on the U+FFFD glyph the responsibility of</span></span><br><span class="line"><span class="comment">// the Drawer or the Face?</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> set prevC = '\ufffd'?</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">draw.DrawMask(d.Dst, dr, d.Src, image.Point&#123;&#125;, mask, maskp, draw.Over)</span><br><span class="line">d.Dot.X += advance</span><br><span class="line">prevC = c</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571534711/blog/watermask/watermark-3-wm-1571395380_pmwbo2.jpg" alt="效果图："></p><p>参考地址如下：<br><a href="https://github.com/golang/freetype/tree/master/example/drawer" target="_blank" rel="noopener">https://github.com/golang/freetype/tree/master/example/drawer</a></p><blockquote><p>批量水印</p></blockquote><p>参考单个水印，构建的 struct 对象新增字段 []string 来接受需要水印的文件地址数组，或者使用文件夹，遍历文件夹下的所有文件统一加水印</p><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><blockquote><p>水印<br><a href="http://www.nljb.net/default/Golang-绘图技术-image-draw-包介绍/" target="_blank" rel="noopener">http://www.nljb.net/default/Golang-绘图技术-image-draw-包介绍/</a><br><a href="https://blog.golang.org/go-imagedraw-package" target="_blank" rel="noopener">https://blog.golang.org/go-imagedraw-package</a><br><a href="https://golang.org/doc/progs/image_draw.go" target="_blank" rel="noopener">https://golang.org/doc/progs/image_draw.go</a><br><a href="https://studygolang.com/articles/12049" target="_blank" rel="noopener">https://studygolang.com/articles/12049</a><br>文字<br><a href="https://github.com/golang/freetype" target="_blank" rel="noopener">https://github.com/golang/freetype</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既然开始写博客，就需要给图片加水印，之前用Java写过一个已经找不到影踪，只记得Java写的还比较麻烦。最近又在重温go的内容，就顺便用go写了下图片加水印的代码。&lt;/p&gt;&lt;h1 id=&quot;输出文字图片&quot;&gt;&lt;a href=&quot;#输出文字图片&quot; class=&quot;headerlink&quot; title=&quot;输出文字图片&quot;&gt;&lt;/a&gt;输出文字图片&lt;/h1&gt;&lt;h2 id=&quot;效果图：&quot;&gt;&lt;a href=&quot;#效果图：&quot; class=&quot;headerlink&quot; title=&quot;效果图：&quot;&gt;&lt;/a&gt;效果图：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dogbaobao/image/upload/v1571535791/blog/watermask/wattermark-1-wm-1571388899_hojx8n.png&quot; alt=&quot;效果图：&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;依赖 &lt;code&gt;github.com/golang/freetype&lt;/code&gt; 仓库&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; WaterMark &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// freetype的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 图片的大小 宽度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	height   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 图片的大小 高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fontSize &lt;span class=&quot;keyword&quot;&gt;float64&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 字体尺寸&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fontDPI  &lt;span class=&quot;keyword&quot;&gt;float64&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//   屏幕每英寸的分辨率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fontFile &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 需要使用的字体文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	srcPath &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 原文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="go" scheme="https://blog.funnycode.cn/categories/go/"/>
    
    
      <category term="go" scheme="https://blog.funnycode.cn/tags/go/"/>
    
      <category term="水印" scheme="https://blog.funnycode.cn/tags/%E6%B0%B4%E5%8D%B0/"/>
    
      <category term="image" scheme="https://blog.funnycode.cn/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>类加载总结</title>
    <link href="https://blog.funnycode.cn/%E7%B1%BB%E5%8A%A0%E8%BD%BD/classloader01/"/>
    <id>https://blog.funnycode.cn/类加载/classloader01/</id>
    <published>2019-10-07T07:29:11.000Z</published>
    <updated>2019-10-17T03:33:56.566Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章提到一个JVM加载多个boot项目（<a href="https://blog.funnycode.cn/springboot/2019-09-28-springboot-one-jvm/），继续看这块内容涉及到了类加载，springboot内嵌tomcat，spring子容器等，在这篇文章做一个大而不一定全的总结。">https://blog.funnycode.cn/springboot/2019-09-28-springboot-one-jvm/），继续看这块内容涉及到了类加载，springboot内嵌tomcat，spring子容器等，在这篇文章做一个大而不一定全的总结。</a></p><a id="more"></a><h1 id="JVM类加载"><a href="#JVM类加载" class="headerlink" title="JVM类加载"></a>JVM类加载</h1><blockquote><p>类加载机制：虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型</p></blockquote><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><ul><li>加载</li><li>连接（验证，准备，解析）</li><li>初始化</li><li>使用</li><li>卸载</li></ul><p>如图所示，类加载有7个阶段。其中加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班的执行。而解析阶段不一定，为了支持Java语言的运行时绑定（也称为动态绑定和晚期绑定），它可以在初始化阶段之后再开始。要注意这些阶段通常都是相互交叉地混合式进行的，通常会在一个阶段执行的过程中调用、激活另一个阶段。</p><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><blockquote><p>主要内容参考《深入理解Java虚拟机》</p></blockquote><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><blockquote><p>类加载的第一个阶段</p></blockquote><p>JVM会完成如下3件事情</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li></ul><p>因为没有指定字节流从哪里获取，常见的 <code>.class</code> 文件的加载方式如下：</p><ul><li>从ZIP包中读取，现在主要发展为 JAR 、 WAR ，比如我们最常见的 springboot 的 fat.jar 和 Tomcat 用的 war</li><li>通过网络去获取</li><li>运行时计算生成，这种场景使用的最多的就是动态代理技术， JDK 的动态代理和 cglib</li><li>通过其他文件生成，比如 JSP 应用</li><li>从数据库中读取，很少见</li></ul><p>相对于类加载的其他阶段，一个非数据组类的加载阶段（准确地说，是加载阶段中获取类的二进制字节流的动作）是开发人员可控性最强的，因为加载阶段既可以使用系统提供的引导类加载器来完成，也可以由用户自定义的类加载器去完成，在自定义类加载器中重写一个类加载器的 <code>loadClass()</code> 方法</p><p>对于数组类而言，数组类本身不通过类加载器创建，它是由JVM直接创建的。但是数组类的元素类型最终是要靠类加载器去创建。一个数组类会遵循如下规则：</p><ul><li>如果数组的组件类型是引用类型，那就递归采用上面提到的加载过程去加载这个组件类型，会和这个加载该组件的类加载器关联</li><li>如果数组的组件类型不是引用类型（ int[] )， JVM 会把数组标记为与引导类加载器关联</li><li>数组类的可见性与它的组件类型可见性一致，如果组件类型不是引用类型， 那数组类型的可见性默认为 public </li></ul><blockquote><p>类加载器加载.class文件后，JVM会把.class对应的二进制字节流按虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机自定义，虚拟机规范未规定此区域的具体数据结构。然后在内存中实例化一个 java.lang.Class 类的对象（注意这个也没规定是在Java堆中，对于 HotSpot虚拟机而言，是存放在方法区的）。还有注意加载阶段和连接阶段的部分内容是交叉进行的，只是说这两个阶段的开始时间是保持有序的，加载阶段开始早于连接阶段。</p></blockquote><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证是连接阶段的第一步，这一阶段的目标是确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><blockquote><p>对各种来源的二进制字节流做检查，是虚拟机自我保护的必要操作</p></blockquote><p>验证阶段大致会完成如下4个阶段：</p><ul><li>文件格式验证，验证字节流是否符合Class文件格式的规范。主要保证输入的字节流能正确地解析并存储于方法区内，只有通过这个环节字节流才会进入内存的方法区中进行存储，后面的3个步骤都只会基于方法区的存储结构进行，不会再直接操作字节流。如魔数0xCAFEBASE开头，常量池的常量否是支持类型等</li><li>元数据验证，对字节码描述的信息进行语义分析，保证不存在不符合Java语言规范的元数据信息。如类的父类，不是抽象类的类是否实现接口的所有方法等</li><li>字节码验证，整个验证过程最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。会对类的方法体进行校验分析，保证被校验类在运行时不会危害虚拟机安全</li><li>符号引用验证，这个阶段发生在虚拟机将符号引用转化为直接引用的时候，这个转换动作是在 解析阶段 发生。因此这一步的作用主要就是确保解析动作能正常执行</li></ul><p>验证阶段虽然非常重要的，但是对于JVM而言并不是必要的，可以通过 -Xverify:none 参数来关闭大部分的类验证，缩短虚拟机类加载时间</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法取中进行分配。</p><p>准备阶段的内存分配仅包括类变量（被static修饰的变量）而不包括实例变量，实例变量会在对象实例化的时候随着对象一起分配到 Java 堆中<br>初始化“通常情况”下是数据类型的零值。如 <code>public static int value = 123;</code> value 变量准备阶段过后的初始值是0而不是123，而把 value 设置成 123 的动作将在初始化阶段才会执行。<br>当类字段的字段属性表中存在 ConstantValue 属性，name在准备阶段变量 value 就会被初始化为 ConstantValue 属性所指定的值。如 <code>public static final int value = 123;</code> 编译时 Javac 将会为 value 生成 ConstantValue 属性，在准备阶段虚拟机就会根据 ConstantValue 的设置将 value 赋值为 123</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，通俗的说符号引用就是以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可；直接引用就是直接指向目标的指针、相对偏移量或是一个间接定位到目标的句柄。后者和JVM内存布局有关，前者无关。</p><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。</p><p>常量内容可以查看<br><a href="https://www.jianshu.com/p/d8492e748c57" target="_blank" rel="noopener">https://www.jianshu.com/p/d8492e748c57</a></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>类初始化是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码（字节码）</p><p>初始化是执行类构造器 <code>&lt;client&gt;()</code> 方法的过程</p><h4 id="和"><a href="#和" class="headerlink" title="和"></a><client>和<init></init></client></h4><h4 id="初始化条件"><a href="#初始化条件" class="headerlink" title="初始化条件"></a>初始化条件</h4><p>Java程序对类的使用方式可以分为两种：</p><ul><li>主动使用：会执行加载、连接、初始化静态域</li><li>被动使用：只执行加载、连接，不执行类的初始化静态域</li></ul><p>JVM严格规定了有且只有5种情况必须立即进行初始化：</p><ul><li>遇到 new 、 getstatic 、 putstatic 或 invokestatic 这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。常见场景：使用new关键字实例化对象的时候、读取或设置一个类的静态字段（被 final 修饰、已在编译器把结果放入常量池的静态字段除外），以及调用一个类的静态方法的时候</li><li>使用 <code>java.lang.reflect</code> 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个类</li><li>当使用 JDK 1.7 的动态语言支持时，如果一个 <code>java.lang.invoke.MethodHanlder</code> 实例最后的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li></ul><p>除去上面的5种场景，所有引用类的方式都不会触发初始化，称为被动引用</p><p>接口的规范和上面类的区别在于第三点，在接口初始化时，并不要求其父接口全部都完成了初始化。</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><blockquote><p>类加载器一开始是为了 Java Applet 的需求而开发出来的，虽然这个技术已经 “死掉”，但类加载器在类层次划分、OSGI、热部署、代码加载等领域大放异彩</p></blockquote><p>java语言系统内置了众多类加载器，从一定程度上讲，只存在两种不同的类加载器：一种是启动类加载器，此类加载由C++实现，是JVM的一部分；另一种就是所有其他的类加载器，这些类加载器均由java实现，且全部继承自<code>java.lang.ClassLoader</code></p><ul><li><p>Bootstrap ClassLoader 启动类加载器，最顶层的加载类，由C++实现，负责加载 <java_home>/lib 目录中或 -Xbootclasspath 中参数指定的路径中的，并且是虚拟机识别的（按名称，如rt.jar）类库，所以名字不符合的类库就算放在 lib 目录中也不会被加载）</java_home></p></li><li><p>Extention ClassLoader 扩展类加载器，由启动类加载器加载，实现为<code>sun.misc.Launcher$ExtClassLoader</code>，负责加载目录 <java_home>/lib/ext 目录中或 -Djava.ext.dirs 中参数指定的路径中的 jar 包和 class 文件</java_home></p></li><li><p>Application ClassLoader 应用类加载器，也称为系统类加载器(System ClassLoader，可由<code>java.lang.ClassLoader.getSystemClassLoader()</code>获取)，实现为<code>sun.misc.Launcher$AppClassLoader</code>，由启动类加载器加载，负责加载当前应用 ClassPath 下的所有类，一般应用程序没有自定义自己的类加载器，这个就是程序的默认类加载器。</p></li></ul><blockquote><p>All classes are loaded based on their names and if any of these classes are not found then it returns a NoClassDefFoundError or ClassNotFoundException.</p></blockquote><h3 id="类的唯一性"><a href="#类的唯一性" class="headerlink" title="类的唯一性"></a>类的唯一性</h3><p>类全限定名称+加载它的类加载器来确立在 Java 虚拟机中的唯一性，通俗的说就是两个全路径都一样的类，必须要同一个类加载器加载才能比较</p><p>在JVM中，类型被定义在一个叫 SystemDictionary 的数据结构中，该数据结构接受类加载器和全类名作为参数，返回类型实例。</p><p><code>SystemDictionary</code>，系统字典，这个数据结构是保存Java加载类型的数据结构，如下图所示：</p><h3 id="双亲委派模型（Parents-Delegation-Model）"><a href="#双亲委派模型（Parents-Delegation-Model）" class="headerlink" title="双亲委派模型（Parents Delegation Model）"></a>双亲委派模型（Parents Delegation Model）</h3><blockquote><p>源自JDK 1.2</p></blockquote><blockquote><p>在双亲委派模型中除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。类加载器之间的父子关系一般不会以继承的关系来实现，而都是用组合的关系来复用父加载器</p></blockquote><h3 id="双亲委派如何工作"><a href="#双亲委派如何工作" class="headerlink" title="双亲委派如何工作"></a>双亲委派如何工作</h3><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载</p><h3 id="双亲委派的好处"><a href="#双亲委派的好处" class="headerlink" title="双亲委派的好处"></a>双亲委派的好处</h3><p>Java类随着它的类加载器一起具备了带有优先级的层次关系。比如 <code>java.lang.Object</code>，它存放在 rt.jar 之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器加载，保证了 <code>Object</code> 类在程序的各种类加载器环境中都是同一个类。（你无法通过自定义 <code>java.lang.Object</code> 来覆盖捣乱）</p><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p><code>java.lang.ClassLoader#loadClass(java.lang.String, boolean)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果父加载器不为空，会让父类去加载，否则自己去加载</p><h1 id="自定义Classloader"><a href="#自定义Classloader" class="headerlink" title="自定义Classloader"></a>自定义Classloader</h1><h1 id="Class-forName和ClassLoader-loadClass"><a href="#Class-forName和ClassLoader-loadClass" class="headerlink" title="Class.forName和ClassLoader.loadClass"></a>Class.forName和ClassLoader.loadClass</h1><blockquote><p>这里讨论的Class.forName是Class类的方法public static Class&lt;?&gt; forName(String className) throws ClassNotFoundException</p></blockquote><p>这里讨论的ClassLoader.loadClass是ClassLoader类的方法public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h1 id="Spring加载"><a href="#Spring加载" class="headerlink" title="Spring加载"></a>Spring加载</h1><h1 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h1><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.geeksforgeeks.org/classloader-in-java/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/classloader-in-java/</a><br><a href="https://www.jianshu.com/p/aedee0e14319" target="_blank" rel="noopener">https://www.jianshu.com/p/aedee0e14319</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-jar-file-structure" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-jar-file-structure</a></p><h1 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h1><p><a href="https://blog.csdn.net/hengyunabc/article/details/79475505" target="_blank" rel="noopener">https://blog.csdn.net/hengyunabc/article/details/79475505</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章提到一个JVM加载多个boot项目（&lt;a href=&quot;https://blog.funnycode.cn/springboot/2019-09-28-springboot-one-jvm/），继续看这块内容涉及到了类加载，springboot内嵌tomcat，spring子容器等，在这篇文章做一个大而不一定全的总结。&quot;&gt;https://blog.funnycode.cn/springboot/2019-09-28-springboot-one-jvm/），继续看这块内容涉及到了类加载，springboot内嵌tomcat，spring子容器等，在这篇文章做一个大而不一定全的总结。&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="类加载" scheme="https://blog.funnycode.cn/categories/%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    
    
      <category term="原创" scheme="https://blog.funnycode.cn/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="springboot" scheme="https://blog.funnycode.cn/tags/springboot/"/>
    
      <category term="classloader" scheme="https://blog.funnycode.cn/tags/classloader/"/>
    
  </entry>
  
  <entry>
    <title>多个springboot运行在同一个JVM</title>
    <link href="https://blog.funnycode.cn/springboot/springbootOneJvm/"/>
    <id>https://blog.funnycode.cn/springboot/springbootOneJvm/</id>
    <published>2019-09-28T09:00:11.000Z</published>
    <updated>2019-10-20T02:15:11.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>当下作为Java开发人员，运行一个服务基本上都会直接基于springboot，因此启动N个服务是需要启动N个springboot程序的。特别在本地环境通过intellij运行多个服务的时候，会需要占用较大的资源，电脑往往会出现卡顿现象。</p></blockquote><p>本文主要介绍如何通过启动一个（入口） <code>main</code> 方法来运行多个服务，从而提高本地的开发爽度。</p><a id="more"></a><h1 id="如何运行"><a href="#如何运行" class="headerlink" title="如何运行"></a>如何运行</h1><blockquote><p>本文例子参考于github的地址，文末有提供</p></blockquote><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><blockquote><p>通过 intellij 创建一个项目，并创建如下module</p></blockquote><ul><li>launcher</li><li>common-service</li><li>first-service</li><li>second-service</li></ul><h3 id="导入必要的依赖"><a href="#导入必要的依赖" class="headerlink" title="导入必要的依赖"></a>导入必要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 会引起一个JMX的问题，下文会说明如何解决 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单个服务说明"><a href="#单个服务说明" class="headerlink" title="单个服务说明"></a>单个服务说明</h3><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571537636/blog/springbootOneJvm/sbojvm-3-wm-1571537594_sucxbc.jpg" alt="服务结构"></p><p>在 first-service 和 second-service 编写最基本的 web 所需要的类 Application 和 Controller</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FirstApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from first microservice!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServiceBackendRunner</span> <span class="keyword">extends</span> <span class="title">BackendRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstServiceBackendRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"first"</span>, FirstApplication.class, CustomizationBean.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果是springboot1.x</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizationBean</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>( <span class="string">"$&#123;backend.apps.first.contextPath&#125;"</span> )</span><br><span class="line">    <span class="keyword">private</span> String contextPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>( <span class="string">"$&#123;backend.apps.first.port&#125;"</span> )</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">        container.setContextPath(contextPath);</span><br><span class="line">        container.setPort(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是springboot2.x</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizationBean</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>( <span class="string">"$&#123;backend.apps.first.contextPath&#125;"</span> )</span><br><span class="line">    <span class="keyword">private</span> String contextPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>( <span class="string">"$&#123;backend.apps.first.port&#125;"</span> )</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">        factory.setContextPath(contextPath);</span><br><span class="line">        factory.setPort(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片中的两个 yml 写下面一个内容即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">FirstService</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8110</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    contextPath:</span> <span class="string">/first</span></span><br></pre></td></tr></table></figure><h3 id="运行核心类"><a href="#运行核心类" class="headerlink" title="运行核心类"></a>运行核心类</h3><blockquote><p>在common模块的核心类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BackendRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区分不通服务的配置</span></span><br><span class="line">    <span class="keyword">private</span> String profile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConfigurableApplicationContext appContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt;[] backendClasses;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object monitor = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> shouldWait;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BackendRunner</span><span class="params">(String profile, <span class="keyword">final</span> Class&lt;?&gt;... backendClasses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.backendClasses = backendClasses;</span><br><span class="line">        <span class="keyword">this</span>.profile = profile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (appContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"AppContext must be null to run this backend"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        runBackendInThread();</span><br><span class="line">        waitUntilBackendIsStarted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">waitUntilBackendIsStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shouldWait) &#123;</span><br><span class="line">                    monitor.wait();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runBackendInThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread runnerThread = <span class="keyword">new</span> BackendRunnerThread();</span><br><span class="line">        shouldWait = <span class="keyword">true</span>;</span><br><span class="line">        runnerThread.setContextClassLoader(backendClasses[<span class="number">0</span>].getClassLoader());</span><br><span class="line">        runnerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringApplication.exit(appContext);</span><br><span class="line">        appContext = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BackendRunnerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 真正启动</span></span><br><span class="line">            <span class="comment">// 设置环境，加载不同配置</span></span><br><span class="line">            System.setProperty(<span class="string">"spring.profiles.active"</span>, profile);</span><br><span class="line">            appContext = SpringApplication.run(backendClasses, <span class="keyword">new</span> String[] &#123;&#125;);</span><br><span class="line">            <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">                shouldWait = <span class="keyword">false</span>;</span><br><span class="line">                monitor.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动核心类"><a href="#启动核心类" class="headerlink" title="启动核心类"></a>启动核心类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroservicesStarter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Backend&gt; activeBackends = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MicroservicesStarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startBackends</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        startBackend(<span class="string">"first-software"</span>, <span class="string">"com.gongdao.middleware.first.backendRunner.FirstServiceBackendRunner"</span>);</span><br><span class="line">        startBackend(<span class="string">"second-software"</span>, <span class="string">"com.gongdao.middleware.second.backendRunner.SecondServiceBackendRunner"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动入口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> backendProjectName 项目名称，对应文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> backendClassName   每个服务的启动类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startBackend</span><span class="params">(<span class="keyword">final</span> String backendProjectName, <span class="keyword">final</span> String backendClassName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL runnerUrl = <span class="keyword">new</span> File(</span><br><span class="line">            System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/"</span> + backendProjectName + <span class="string">"/target/classes/"</span>).toURI()</span><br><span class="line">            .toURL();</span><br><span class="line"></span><br><span class="line">        URL[] urls = <span class="keyword">new</span> URL[] &#123;runnerUrl&#125;;</span><br><span class="line"></span><br><span class="line">        URLClassLoader cl = <span class="keyword">new</span> URLClassLoader(urls, MicroservicesStarter.class.getClassLoader());</span><br><span class="line">        Class&lt;?&gt; runnerClass = cl.loadClass(backendClassName);</span><br><span class="line"></span><br><span class="line">        Object runnerInstance = runnerClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Backend backend = <span class="keyword">new</span> Backend(runnerClass, runnerInstance);</span><br><span class="line">        activeBackends.add(backend);</span><br><span class="line"></span><br><span class="line">        runnerClass.getMethod(<span class="string">"run"</span>).invoke(runnerInstance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stopAllBackends</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Backend b : activeBackends) &#123;</span><br><span class="line">            b.runnerClass.getMethod(<span class="string">"stop"</span>).invoke(b.runnerInstance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Backend</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Class&lt;?&gt; runnerClass;</span><br><span class="line">        <span class="keyword">private</span> Object runnerInstance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Backend</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; runnerClass, <span class="keyword">final</span> Object runnerInstance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.runnerClass = runnerClass;</span><br><span class="line">            <span class="keyword">this</span>.runnerInstance = runnerInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><blockquote><p>点击 com.gongdao.middleware.LauncherApplication#main 启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LauncherApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MicroservicesStarter.startBackends();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571537636/blog/springbootOneJvm/sbojvm-1-wm-1571537591_ndonnh.jpg" alt="first"></p><p><img src="https://res.cloudinary.com/dogbaobao/image/upload/v1571537636/blog/springbootOneJvm/sbojvm-2-wm-1571537593_t4avao.jpg" alt="second"></p><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用了不同的classloader（默认类+指定的路径的class文件）去加载不同的服务</p><h2 id="actuate包的JMX注册异常"><a href="#actuate包的JMX注册异常" class="headerlink" title="actuate包的JMX注册异常"></a>actuate包的JMX注册异常</h2><blockquote><p>在 springboot1.x 的时候出现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">2019-09-27 15:13:11.343 ERROR 51322 --- [       Thread-5] o.s.b.a.e.jmx.EndpointMBeanExporter      : Could not register JmxEndpoint [auditEventsEndpoint]</span><br><span class="line"></span><br><span class="line">org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [org.springframework.boot.actuate.endpoint.jmx.AuditEventsJmxEndpoint@65a39e41] with key &apos;auditEventsEndpoint&apos;; nested exception is javax.management.InstanceAlreadyExistsException: org.springframework.boot:type=Endpoint,name=auditEventsEndpoint</span><br><span class="line">at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:628) ~[spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.registerJmxEndpoints(EndpointMBeanExporter.java:174) [spring-boot-actuator-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.locateAndRegisterEndpoints(EndpointMBeanExporter.java:162) [spring-boot-actuator-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.doStart(EndpointMBeanExporter.java:158) [spring-boot-actuator-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.start(EndpointMBeanExporter.java:337) [spring-boot-actuator-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:50) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:350) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:880) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:146) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) [spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:124) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]</span><br><span class="line">at com.gongdao.middleware.common.BackendRunner$BackendRunnerThread.run(BackendRunner.java:58) [classes/:na]</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>通过引入 profile 让每个服务调用自己的配置文件，通过配置如下内容解决：</p><p>需要在 launcher 的resource下添加对应的 yml 文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jmx:</span></span><br><span class="line"><span class="attr">    default-domain:</span> <span class="string">FirstService</span></span><br><span class="line"></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line"><span class="attr">  jmx:</span></span><br><span class="line"><span class="attr">    unique-names:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    domain:</span> <span class="string">FirstService</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/rameez4ever/springboot-demo/tree/master/springboot-multi-service-launcher" target="_blank" rel="noopener">https://github.com/rameez4ever/springboot-demo/tree/master/springboot-multi-service-launcher</a><br><a href="https://www.davidtanzer.net/david&#39;s%20blog/2015/04/01/running-multiple-spring-boot-apps-in-the-same-jvm.html" target="_blank" rel="noopener">https://www.davidtanzer.net/david&#39;s%20blog/2015/04/01/running-multiple-spring-boot-apps-in-the-same-jvm.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;当下作为Java开发人员，运行一个服务基本上都会直接基于springboot，因此启动N个服务是需要启动N个springboot程序的。特别在本地环境通过intellij运行多个服务的时候，会需要占用较大的资源，电脑往往会出现卡顿现象。&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;本文主要介绍如何通过启动一个（入口） &lt;code&gt;main&lt;/code&gt; 方法来运行多个服务，从而提高本地的开发爽度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://blog.funnycode.cn/categories/springboot/"/>
    
    
      <category term="原创" scheme="https://blog.funnycode.cn/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="记录" scheme="https://blog.funnycode.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="springboot" scheme="https://blog.funnycode.cn/tags/springboot/"/>
    
      <category term="classloader" scheme="https://blog.funnycode.cn/tags/classloader/"/>
    
  </entry>
  
  <entry>
    <title>Netty权威指南-客户端创建</title>
    <link href="https://blog.funnycode.cn/netty/netty-qwzn-client/"/>
    <id>https://blog.funnycode.cn/netty/netty-qwzn-client/</id>
    <published>2019-09-25T14:17:33.000Z</published>
    <updated>2019-09-28T12:01:46.517Z</updated>
    
    <content type="html"><![CDATA[<p>步骤1 用户线程创建 Bootstrap 实例，通过 API 设置创建客户端相关的参数，异步发起客户端连接<br>步骤2 创建处理客户端连接、 I/O 读写的 Reactor 线程组 NioEventLoopGroup 。可以通过构造函数指定 I/O 线程的个数，默认为 CPU 内核数的2倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@link</span> EventLoopGroup&#125; which is used to handle all the events for the to-be-created</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Channel&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">group</span><span class="params">(EventLoopGroup group)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"group"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.group != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"group set already"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.group = group;</span><br><span class="line">    <span class="keyword">return</span> self();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allow to specify a &#123;<span class="doctag">@link</span> ChannelOption&#125; which is used for the &#123;<span class="doctag">@link</span> Channel&#125; instances once they got</span></span><br><span class="line"><span class="comment"> * created. Use a value of &#123;<span class="doctag">@code</span> null&#125; to remove a previous set &#123;<span class="doctag">@link</span> ChannelOption&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">B <span class="title">option</span><span class="params">(ChannelOption&lt;T&gt; option, T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (option == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"option"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (options) &#123;</span><br><span class="line">            options.remove(option);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (options) &#123;</span><br><span class="line">            options.put(option, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> self();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤3 通过 Bootstrap 的 ChannelFactory 和用户指定的 Channel 类型创建用于客户端连接的 NioSocketChannel ，它的功能类似于JDK NIO类库提供的 SocketChannel<br>步骤4 创建默认的 Channel Handler Piepline，用于调度和执行网络事件<br>步骤5 异步发起 TCP 连接，判断连接是否成功。如果成功，则直接将 NioSocketChannel 注册到多路复用器上，监听读操作位，用于数据报读取和消息发送；<br>如果没有立即连接成功，则注册连接监听位到多路复用器，等待连接结果<br>步骤6 注册对应到网络监听状态位到多路复用器<br>步骤7 由多路复用器在 I/O 现场中轮询各 Channel，处理连接结果<br>步骤8 如果连接成功，设置 Future 结果，发送连接成功事件，触发 ChannelPipeline 执行<br>步骤9 由 ChannelPipeline 调度执行系统和用户到 ChannelHandler，执行业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> port, <span class="keyword">final</span> String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    EventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Bootstrap b = <span class="keyword">new</span> Bootstrap(); <span class="comment">// 1</span></span><br><span class="line">        b.group(worker) <span class="comment">// 2</span></span><br><span class="line">            .channel(NioSocketChannel.class)</span><br><span class="line">            .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">            .handler(<span class="keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                    handlerAdapterMap.entrySet().stream()</span><br><span class="line">                        .forEach(handlerAdapter -&gt; ch.pipeline()</span><br><span class="line">                            .addLast(handlerAdapter.getKey(), handlerAdapter.getValue()));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        ChannelFuture channelFuture = b.connect(host, port);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            channelFuture.channel().writeAndFlush(<span class="string">"filter result"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        worker.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;步骤1 用户线程创建 Bootstrap 实例，通过 API 设置创建客户端相关的参数，异步发起客户端连接&lt;br&gt;步骤2 创建处理客户端连接、 I/O 读写的 Reactor 线程组 NioEventLoopGroup 。可以通过构造函数指定 I/O 线程的个数，默认为 CPU 内核数的2倍&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * The &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; EventLoopGroup&amp;#125; which is used to handle all the events for the to-be-created&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Channel&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; B &lt;span class=&quot;title&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(EventLoopGroup group)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (group == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;string&quot;&gt;&quot;group&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.group != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;group set already&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.group = group;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="netty" scheme="https://blog.funnycode.cn/categories/netty/"/>
    
    
      <category term="netty" scheme="https://blog.funnycode.cn/tags/netty/"/>
    
      <category term="原创" scheme="https://blog.funnycode.cn/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="netty客户端" scheme="https://blog.funnycode.cn/tags/netty%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
      <category term="学习" scheme="https://blog.funnycode.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>事务采坑记录01</title>
    <link href="https://blog.funnycode.cn/spring/transaction-action-01/"/>
    <id>https://blog.funnycode.cn/spring/transaction-action-01/</id>
    <published>2019-09-24T09:29:03.000Z</published>
    <updated>2019-09-28T10:29:16.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="故事原由"><a href="#故事原由" class="headerlink" title="故事原由"></a>故事原由</h1><p>最近有个同事在使用开放平台透出去自己方法的时候，开放平台返回出来了异常。一开始问我的时候，因为用到了RPC的泛化调用，我和他还扯了一会的泛化的异常处理逻辑。等忙完自己的事情后，我仔细查跟他的代码走了下，发现事务有嵌套关系，突然我就意识到了事务的一个常识，在这里记录下。 </p><h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BService bService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AService aService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">            result = bService.<span class="keyword">do</span>();</span><br><span class="line">            aService.<span class="keyword">do</span>();</span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>疑惑的点在于我都  <code>try...catch</code>  住了，为何还会出现异常？这个问题通过阅读事务的源码可以让人豁然开朗。</p><h1 id="复现问题的Demo"><a href="#复现问题的Demo" class="headerlink" title="复现问题的Demo"></a>复现问题的Demo</h1><p>定义一个3个Service类，AService、BService、CService，在controller调用CService的方法execute，然后CService里面对数据库做一次更新，再调用BService和AService的方法，其中某个方法里面发生异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CService cService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"transaction-demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">result</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cService.execute(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CServiceImpl</span> <span class="keyword">implements</span> <span class="title">CService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DruidDemoMapper druidDemoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BService bService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AService aService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DruidDemo druidDemo = <span class="keyword">new</span> DruidDemo();</span><br><span class="line">            druidDemo.setId(<span class="number">401L</span>);</span><br><span class="line">            druidDemo.setName(<span class="string">"tie"</span>);</span><br><span class="line">            druidDemo.setAge(<span class="number">18</span>);</span><br><span class="line">            druidDemoMapper.updateByPrimaryKey(druidDemo);</span><br><span class="line">            result = aService.execute(value);</span><br><span class="line">            result = bService.executeError(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServiceImpl</span> <span class="keyword">implements</span> <span class="title">AService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServiceImpl</span> <span class="keyword">implements</span> <span class="title">BService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">executeError</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="核心源码说明"><a href="#核心源码说明" class="headerlink" title="核心源码说明"></a>核心源码说明</h1><p>前置说明</p><ul><li>@Service等注解，意味着会产生一个代理类（目前的版本基于cglib）</li><li>只分析本次问题的核心代码（补充一次完整的事务调用流程）</li><li>事务管理器会单独剖析</li></ul><h2 id="status对象"><a href="#status对象" class="headerlink" title="status对象"></a>status对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultTransactionStatus</span> <span class="keyword">extends</span> <span class="title">AbstractTransactionStatus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// self</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> newTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> newSynchronization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> readOnly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> debug;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object suspendedResources;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AbstractTransactionStatus</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> rollbackOnly = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> completed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object savepoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际运行时如下：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/327432/1569381660979-c364f0c7-4a84-46e8-bbd7-2d4d81207f52.png" alt="DefaultTransactionStatus"></p><h2 id="一个状态的设置"><a href="#一个状态的设置" class="headerlink" title="一个状态的设置"></a>一个状态的设置</h2><h3 id="rollbackOnly"><a href="#rollbackOnly" class="headerlink" title="rollbackOnly"></a>rollbackOnly</h3><ul><li>org.springframework.transaction.support.DefaultTransactionStatus#isGlobalRollbackOnly</li><li>org.springframework.transaction.support.ResourceHolderSupport#isRollbackOnly</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceHolderSupport</span> <span class="keyword">implements</span> <span class="title">ResourceHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> synchronizedWithTransaction = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> rollbackOnly = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.rollbackOnly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置的地方"><a href="#设置的地方" class="headerlink" title="设置的地方"></a>设置的地方</h3><ul><li>org.springframework.transaction.support.AbstractPlatformTransactionManager#processRollback</li><li>org.springframework.transaction.support.AbstractPlatformTransactionManager#doSetRollbackOnly</li><li>org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject#setRollbackOnly</li><li>org.springframework.transaction.support.ResourceHolderSupport#setRollbackOnly</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processRollback</span><span class="params">(DefaultTransactionStatus status, <span class="keyword">boolean</span> unexpected)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> unexpectedRollback = unexpected; <span class="comment">// 回滚进来的时候是 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line">                    <span class="comment">// 这个在内嵌事务的时候有一种使用场景</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Participating in larger transaction</span></span><br><span class="line"><span class="keyword">if</span> (status.hasTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Participating transaction failed - marking existing transaction as rollback-only"</span>);</span><br><span class="line">&#125;</span><br><span class="line">doSetRollbackOnly(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.debug(<span class="string">"Should roll back transaction but cannot - no transaction available"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unexpected rollback only matters here if we're asked to fail early</span></span><br><span class="line"><span class="keyword">if</span> (!isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">unexpectedRollback = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终事务回滚会走到这里，抛出这个异常</span></span><br><span class="line"><span class="keyword">if</span> (unexpectedRollback) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line"><span class="string">"Transaction rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>21行 进入回滚逻辑，会设置rollbackOnly=true</li></ul><h2 id="异常触发的地方"><a href="#异常触发的地方" class="headerlink" title="异常触发的地方"></a>异常触发的地方</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (status.isCompleted()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line"><span class="string">"Transaction is already completed - do not call commit or rollback more than once per transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Transactional code has requested rollback"</span>);</span><br><span class="line">&#125;</span><br><span class="line">processRollback(defStatus, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Global transaction is marked as rollback-only but transactional code requested commit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">processRollback(defStatus, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processCommit(defStatus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>16行 shouldCommitOnGlobalRollbackOnly 一直是false，所以第一个条件是true，所以只要第二个条件满足就会进入processRollback<br>这个地方比较骚气的地方是，commit里面会走真正的rollback逻辑，<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGlobalRollbackOnly</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">this</span>.transaction <span class="keyword">instanceof</span> SmartTransactionObject) &amp;&amp;</span><br><span class="line">((SmartTransactionObject) <span class="keyword">this</span>.transaction).isRollbackOnly());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>结合上面的DefaultTransactionStatus对象可以清楚的看到属性变化</p><h2 id="调用链路"><a href="#调用链路" class="headerlink" title="调用链路"></a>调用链路</h2><p>一些细节不在本文展开</p><blockquote><p>逻辑起始<br>controller中调用 <code>com.funnycode.dashboard.service.CService#execute</code></p></blockquote><blockquote><p>核心代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//We start with an index of -1 and increment early.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object interceptorOrInterceptionAdvice =</span><br><span class="line"><span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="keyword">this</span>.currentInterceptorIndex);</span><br><span class="line"><span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line"><span class="comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line"><span class="comment">// been evaluated and found to match.</span></span><br><span class="line">InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line">Class&lt;?&gt; targetClass = (<span class="keyword">this</span>.targetClass != <span class="keyword">null</span> ? <span class="keyword">this</span>.targetClass : <span class="keyword">this</span>.method.getDeclaringClass());</span><br><span class="line"><span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, targetClass, <span class="keyword">this</span>.arguments)) &#123;</span><br><span class="line"><span class="keyword">return</span> dm.interceptor.invoke(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Dynamic matching failed.</span></span><br><span class="line"><span class="comment">// Skip this interceptor and invoke the next in the chain.</span></span><br><span class="line"><span class="keyword">return</span> proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// It's an interceptor, so we just invoke it: The pointcut will have</span></span><br><span class="line"><span class="comment">// been evaluated statically before this object was constructed.</span></span><br><span class="line"><span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进入cglib</p><ul><li>org.sporg.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor#intercept 这里会获取到事务切面<ul><li>org.springframework.aop.framework.ReflectiveMethodInvocation#proceed 21行 继续调用自己方法 proceed()<ul><li>org.springframework.transaction.interceptor.TransactionInterceptor#invoke 27行 再次进来会走Interceptor<ul><li>org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction<ul><li>org.springframework.transaction.interceptor.TransactionAspectSupport.InvocationCallback#proceedWithInvocation</li><li>org.springframework.aop.framework.ReflectiveMethodInvocation#proceed<ul><li>org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation#invokeJoinpoint<ul><li>org.springframework.cglib.proxy.MethodProxy#invoke<ul><li>org.springframework.cglib.reflect.FastClass#invoke(int, java.lang.Object, java.lang.Object[])</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></blockquote><blockquote><p>执行<br>进入<code>com.funnycode.dashboard.service.CService#execute</code>真正执行代码</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;故事原由&quot;&gt;&lt;a href=&quot;#故事原由&quot; class=&quot;headerlink&quot; title=&quot;故事原由&quot;&gt;&lt;/a&gt;故事原由&lt;/h1&gt;&lt;p&gt;最近有个同事在使用开放平台透出去自己方法的时候，开放平台返回出来了异常。一开始问我的时候，因为用到了RPC的泛化调用，我和他还扯了一会的泛化的异常处理逻辑。等忙完自己的事情后，我仔细查跟他的代码走了下，发现事务有嵌套关系，突然我就意识到了事务的一个常识，在这里记录下。 &lt;/p&gt;&lt;h1 id=&quot;问题说明&quot;&gt;&lt;a href=&quot;#问题说明&quot; class=&quot;headerlink&quot; title=&quot;问题说明&quot;&gt;&lt;/a&gt;问题说明&lt;/h1&gt;&lt;p&gt;伪代码如下：&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BService bService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; AService aService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String result = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ......&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = bService.&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            aService.&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ......&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://blog.funnycode.cn/categories/spring/"/>
    
    
      <category term="原创" scheme="https://blog.funnycode.cn/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="transaction" scheme="https://blog.funnycode.cn/tags/transaction/"/>
    
      <category term="事务" scheme="https://blog.funnycode.cn/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="记录" scheme="https://blog.funnycode.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>阿里云RDS采坑记录01</title>
    <link href="https://blog.funnycode.cn/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/aliyun-rds-error-01/"/>
    <id>https://blog.funnycode.cn/数据同步/aliyun-rds-error-01/</id>
    <published>2019-09-22T09:33:11.000Z</published>
    <updated>2019-09-26T02:32:15.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="故事原由"><a href="#故事原由" class="headerlink" title="故事原由"></a>故事原由</h1><p>上周同事负责的同步服务出现宕机后，由于在忙于另一个重要的项目，线上没有及时处理，后发现同步数据丢失。我趁机了解了下我们的同步逻辑并对这次异常做一个简单的总结。</p><h1 id="异常描述"><a href="#异常描述" class="headerlink" title="异常描述"></a>异常描述</h1><p>线上我们基于otter的msyql数据同步服务出错，出错后会停止数据同步（我们后续的配置没有从中心节点同步到私有云节点），导致了私有云无法正常启动部分服务。</p><a id="more"></a><h1 id="发生背景"><a href="#发生背景" class="headerlink" title="发生背景"></a>发生背景</h1><ul><li>我们分阿里云（中心节点），北京私有云节点，广州私有云节点等，数据会从中心节点同步到私有云节点</li><li>中心节点使用了阿里云的RDS MySQL数据库，私有云节点采用自己搭建的MySQL</li><li>采用基于otter的数据同步服务（otter基于canal）</li><li>我们采用了xxl-job来做定时调度，因为之前认为它只有DML操作，我们的同步服务没有对它的DDL操作做处理</li><li>xxl-job的机器配置的较低，数据量变大之后XXL_JOB_QRTZ_TRIGGER_LOG的查询语句运行较慢，我们给它增加了个索引</li><li>我们的同步服务异常后，会停止数据同步</li><li>A服务发布，在中心节点加了配置，私有云节点启动失败</li><li>查询发现同步服务异常，无法通过binlog的偏移量找到记录，导致无法把中心节点加了的配置同步到私有云节点</li><li>我们是在一天后对这个问题做的处理</li></ul><blockquote><p>xxl-job的SQL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.id, t.job_group, t.job_id, t.executor_address, t.executor_handler</span><br><span class="line">  , t.executor_param, t.executor_sharding_param, t.executor_fail_retry_count, t.trigger_time, t.trigger_code</span><br><span class="line">  , t.trigger_msg, t.handle_time, t.handle_code, t.handle_msg</span><br><span class="line"><span class="keyword">FROM</span> XXL_JOB_QRTZ_TRIGGER_LOG t</span><br><span class="line"><span class="keyword">WHERE</span> t.job_group = ?</span><br><span class="line">  <span class="keyword">AND</span> t.job_id = ?</span><br><span class="line">  <span class="keyword">AND</span> t.trigger_time &gt;= ?</span><br><span class="line">  <span class="keyword">AND</span> t.trigger_time &lt;= ?</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> ?, ?</span><br></pre></td></tr></table></figure><blockquote><p>mysql查看binlog</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 查看binlog文件列表</span><br><span class="line">mysql&gt; show binary logs;</span><br><span class="line">+<span class="comment">------------------+-----------+</span></span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+<span class="comment">------------------+-----------+</span></span><br><span class="line">| mysql-bin.000001 |    107853 |</span><br><span class="line">+<span class="comment">------------------+-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 查看<span class="keyword">binlog</span>状态</span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| mysql-bin.000001 |   107853 |              |                  |                   |</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="解决对策"><a href="#解决对策" class="headerlink" title="解决对策"></a>解决对策</h1><p>因为同步服务是由于binlog的偏移量问题而失败，偏移量是通过zk节点去获取的，我们去MySQL查询了最新的可用的偏移量，设置到了zk的指定节点，让同步服务正常运行。（我们的配置同步在新偏移量之后，所以启动后能够从中心节点同步到私有云节点）</p><p>这个是临时的解决方案，我们没法找到之前的binlog的完整记录</p><h1 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h1><h2 id="为什么过了一天，同步服务会启动失败？"><a href="#为什么过了一天，同步服务会启动失败？" class="headerlink" title="为什么过了一天，同步服务会启动失败？"></a>为什么过了一天，同步服务会启动失败？</h2><p>同步服务失败，因为binlog找不到。MySQL我们自己安装的话binlog配置默认是不清理的，但是RDS上不是这样的。<br>下面是RDS默认配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 保留时长：默认值为18，表示实例空间内默认保存最近18个小时内的Binlog文件，18个小时之前的日志将在备份后（需要开启日志备份）清理。保留时长可选范围值为0~7*24小时。</span><br><span class="line">- 空间使用率不超过：默认值为30%，表示本地Binlog空间使用率大于30%时，系统会从最早的Binlog开始清理，直到空间使用率低于30%。空间使用率不超过可选范围值为0 - 50% 。</span><br><span class="line">- 可用空间保护，默认开启该功能，表示当实例总空间使用率超过80%或实例剩余可用空间不足5GB时，会强制从最早的Binlog开始清理，直到总空间使用率降到80%以下且实例剩余可用空间大于5GB。</span><br></pre></td></tr></table></figure><p>我们可以看到RDS默认保留时间小于一天，所以我们停了一天后再度开启，导致binlog位置找不到，只能从最新的偏移量同步。这里首先把保留时长调至3天（我们的同步服务不可能停3天，在某些改造项目，同步服务可能会停1-2天），这个需要根据实际场景去设置合理的值。</p><h2 id="binlog不在了，如何补救？"><a href="#binlog不在了，如何补救？" class="headerlink" title="binlog不在了，如何补救？"></a>binlog不在了，如何补救？</h2><p>阿里云会把binlog保存到OSS，从OSS下载回来binlog，然后把binlog设置到MySQL指定位置。</p><p>本机位置是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;故事原由&quot;&gt;&lt;a href=&quot;#故事原由&quot; class=&quot;headerlink&quot; title=&quot;故事原由&quot;&gt;&lt;/a&gt;故事原由&lt;/h1&gt;&lt;p&gt;上周同事负责的同步服务出现宕机后，由于在忙于另一个重要的项目，线上没有及时处理，后发现同步数据丢失。我趁机了解了下我们的同步逻辑并对这次异常做一个简单的总结。&lt;/p&gt;&lt;h1 id=&quot;异常描述&quot;&gt;&lt;a href=&quot;#异常描述&quot; class=&quot;headerlink&quot; title=&quot;异常描述&quot;&gt;&lt;/a&gt;异常描述&lt;/h1&gt;&lt;p&gt;线上我们基于otter的msyql数据同步服务出错，出错后会停止数据同步（我们后续的配置没有从中心节点同步到私有云节点），导致了私有云无法正常启动部分服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据同步" scheme="https://blog.funnycode.cn/categories/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
    
      <category term="otter" scheme="https://blog.funnycode.cn/tags/otter/"/>
    
      <category term="canal" scheme="https://blog.funnycode.cn/tags/canal/"/>
    
      <category term="mysql" scheme="https://blog.funnycode.cn/tags/mysql/"/>
    
      <category term="binlog" scheme="https://blog.funnycode.cn/tags/binlog/"/>
    
      <category term="阿里云RDS" scheme="https://blog.funnycode.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91RDS/"/>
    
      <category term="原创" scheme="https://blog.funnycode.cn/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.funnycode.cn/hexo/hello-world/"/>
    <id>https://blog.funnycode.cn/hexo/hello-world/</id>
    <published>2018-01-11T15:54:11.000Z</published>
    <updated>2019-09-22T06:44:43.002Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.funnycode.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://blog.funnycode.cn/tags/hexo/"/>
    
      <category term="blog" scheme="https://blog.funnycode.cn/tags/blog/"/>
    
      <category term="博客" scheme="https://blog.funnycode.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
